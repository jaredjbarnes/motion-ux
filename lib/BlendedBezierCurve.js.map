{"version":3,"sources":["../src/BlendedBezierCurve.js"],"names":["BlendedBezierCurve","options","bezierCurveA","bezierCurveB","offsetValue","valueAt","offset","pointsA","points","map","p","filter","slice","firstPoint","x","length","index","lastIndexOf","unshift","splice","bezierCurve","BezierCurve","validateOptions","percentage","value","Error"],"mappings":";;;;;;;AAAA;;;;;;;;;;;;;;;;;;IAEqBA,kB;;;AACnB,8BAAYC,OAAZ,EAAqB;AAAA;;AAAA;;AACnBA,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACA,SAAKC,YAAL,GAAoBD,OAAO,CAACC,YAA5B;AACA,SAAKC,YAAL,GAAoBF,OAAO,CAACE,YAA5B;AAEA,QAAMC,WAAW,GAAG,KAAKF,YAAL,CAAkBG,OAAlB,CAA0BJ,OAAO,CAACK,MAAlC,CAApB;AACA,QAAMC,OAAO,GAAG,KAAKL,YAAL,CAAkBM,MAAlB,CACbC,GADa,CACT,UAACC,CAAD;AAAA,aAAO,KAAI,CAACR,YAAL,CAAkBG,OAAlB,CAA0BK,CAA1B,IAA+BN,WAAtC;AAAA,KADS,EAEbO,MAFa,CAEN,UAACD,CAAD;AAAA,aAAOA,CAAC,IAAI,CAAZ;AAAA,KAFM,CAAhB;AAIA,QAAMF,MAAM,GAAG,KAAKL,YAAL,CAAkBK,MAAlB,CAAyBI,KAAzB,EAAf;AACA,QAAMC,UAAU,GAAGN,OAAO,CAAC,CAAD,CAA1B;;AACA,SAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,MAAM,CAACO,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACtC,UAAIN,MAAM,CAACM,CAAD,CAAN,IAAaD,UAAjB,EAA6B;AAC3BL,QAAAA,MAAM,CAACM,CAAD,CAAN,GAAYD,UAAZ;AACD;AACF;;AAED,QAAMG,KAAK,GAAGR,MAAM,CAACS,WAAP,CAAmB,CAAnB,CAAd;AAEAV,IAAAA,OAAO,CAACW,OAAR,CAAgB,CAAhB;AACAV,IAAAA,MAAM,CAACW,MAAP,OAAAX,MAAM,GAAQQ,KAAK,GAAG,CAAhB,EAAmB,CAAnB,4BAAyBT,OAAzB,GAAN;AAEA,SAAKa,WAAL,GAAmB,IAAIC,oBAAJ,CAAgBb,MAAhB,CAAnB;AACA,SAAKc,eAAL;AACD;;;;4BAEOC,U,EAAY;AAClB,UAAMC,KAAK,GAAG,KAAKJ,WAAL,CAAiBf,OAAjB,CAAyBkB,UAAzB,CAAd;AACA,aAAOC,KAAP;AACD;;;sCAEiB;AAChB,UACE,OAAO,KAAKtB,YAAL,CAAkBG,OAAzB,KAAqC,UAArC,IACA,OAAO,KAAKF,YAAL,CAAkBE,OAAzB,KAAqC,UAFvC,EAGE;AACA,cAAM,IAAIoB,KAAJ,CACJ,oEADI,CAAN;AAGD;AACF","sourcesContent":["import BezierCurve from \"./BezierCurve.js\";\n\nexport default class BlendedBezierCurve {\n  constructor(options) {\n    options = options || {};\n    this.bezierCurveA = options.bezierCurveA;\n    this.bezierCurveB = options.bezierCurveB;\n\n    const offsetValue = this.bezierCurveA.valueAt(options.offset);\n    const pointsA = this.bezierCurveA.points\n      .map((p) => this.bezierCurveA.valueAt(p) - offsetValue)\n      .filter((p) => p >= 0);\n\n    const points = this.bezierCurveB.points.slice();\n    const firstPoint = pointsA[0];\n    for (let x = 0; x < points.length; x++) {\n      if (points[x] <= firstPoint) {\n        points[x] = firstPoint;\n      }\n    }\n\n    const index = points.lastIndexOf(0);\n\n    pointsA.unshift(0);\n    points.splice(index + 1, 0, ...pointsA);\n\n    this.bezierCurve = new BezierCurve(points);\n    this.validateOptions();\n  }\n\n  valueAt(percentage) {\n    const value = this.bezierCurve.valueAt(percentage);\n    return value;\n  }\n\n  validateOptions() {\n    if (\n      typeof this.bezierCurveA.valueAt !== \"function\" ||\n      typeof this.bezierCurveB.valueAt !== \"function\"\n    ) {\n      throw new Error(\n        \"Both bezierCurveA and BezierCurveB need to have valueAt functions.\"\n      );\n    }\n  }\n}\n"],"file":"BlendedBezierCurve.js"}