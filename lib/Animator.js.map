{"version":3,"sources":["../src/Animator.js"],"names":["visitor","GraphsVisitor","Animator","animation","visit","bind","time","bezierCurve","BezierCurve","animationGraphs","updateAnimationGraphs","length","push","from","graph","x","controls","to","result","nodes","cloneNodes","slice","resultNode","pop","name","elapsedTime","startAt","animationDuration","endAt","timeWithEasing","easing","points","map","node","value","setPoints","valueAt","Array","isArray","children","setCallback","visitDown","toString"],"mappings":"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","sourcesContent":["import BezierCurve from \"./BezierCurve.js\";\nimport GraphsVisitor from \"./GraphsVisitor.js\";\n\nconst visitor = new GraphsVisitor();\n\nexport default class Animator {\n  constructor(animation) {\n    this.animation = animation;\n    this.visit = this.visit.bind(this);\n    this.time = 0;\n    this.bezierCurve = new BezierCurve([]);\n    this.animationGraphs = [];\n    this.updateAnimationGraphs();\n  }\n\n  updateAnimationGraphs() {\n    this.animationGraphs.length = 0;\n    this.animationGraphs.push(this.animation.from.graph);\n\n    for (let x = 0; x < this.animation.controls.length; x++) {\n      this.animationGraphs.push(this.animation.controls[x].graph);\n    }\n\n    this.animationGraphs.push(this.animation.to.graph);\n    this.animationGraphs.push(this.animation.result.graph);\n  }\n\n  visit(nodes) {\n    const cloneNodes = nodes.slice();\n    const resultNode = cloneNodes.pop();\n    const time = this.time;\n\n    if (cloneNodes[0].name === \"number\") {\n      const elapsedTime = time - this.animation.startAt;\n      const animationDuration = this.animation.endAt - this.animation.startAt;\n      const timeWithEasing = this.animation.easing(\n        elapsedTime / animationDuration\n      );\n\n      const points = cloneNodes.map((node) => node.value);\n\n      this.bezierCurve.setPoints(points);\n      resultNode.value = this.bezierCurve.valueAt(timeWithEasing);\n    } else {\n      if (!Array.isArray(resultNode.children)) {\n        if (time >= this.animation.startAt) {\n          resultNode.value = cloneNodes[cloneNodes.length - 1].value;\n        } else {\n          resultNode.value = cloneNodes[0].value;\n        }\n      }\n    }\n  }\n\n  update(time) {\n    this.updateAnimationGraphs();\n    this.time = time;\n\n    visitor.setCallback(this.visit);\n    visitor.visitDown(this.animationGraphs, true);\n\n    const value = this.animation.result.graph.toString();\n    this.animation.result.value = value;\n\n    return this.animation.result;\n  }\n}\n"],"file":"Animator.js"}