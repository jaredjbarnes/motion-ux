{"version":3,"sources":["../src/Animation.js"],"names":["sortAsc","animatorA","animatorB","keyframe","startAt","Animation","keyframes","animators","Map","_time","initialize","_currentValues","map","Keyframe","fromSimpleConfig","Animator","_createCurrentValues","sort","reduce","results","animator","name","property","result","clone","currentValue","value","graph","graphHash","visitedMap","length","x","key","has","set","_assignValue","time","forEach","update","_saveCurrentValues","timeline","oldKeyframes","a","newKeyframes"],"mappings":"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","sourcesContent":["import Animator from \"./Animator.js\";\nimport Keyframe from \"./Keyframe.js\";\n\nconst sortAsc = (animatorA, animatorB) => {\n  return animatorA.keyframe.startAt - animatorB.keyframe.startAt;\n};\n\nexport default class Animation {\n  constructor(keyframes) {\n    this.animators = new Map();\n    this._time = 0;\n\n    this.initialize(keyframes);\n  }\n\n  initialize(keyframes) {\n    this._currentValues = {};\n\n    this.animators = keyframes\n      .map((keyframe) => {\n        if (keyframe instanceof Keyframe) {\n          return keyframe;\n        } else {\n          return Keyframe.fromSimpleConfig(keyframe);\n        }\n      })\n      .map((keyframe) => new Animator(keyframe));\n\n    this._createCurrentValues();\n\n    // Sort by time.\n    this.animators.sort(sortAsc);\n  }\n\n  _createCurrentValues() {\n    this._currentValues = this.animators.reduce((results, animator) => {\n      const name = animator.keyframe.name;\n      const property = animator.keyframe.property;\n\n      let keyframe = results[name];\n\n      if (keyframe == null) {\n        keyframe = results[name] = {};\n      }\n\n      if (keyframe[property] == null) {\n        keyframe[property] = animator.keyframe.result.clone();\n      }\n\n      return results;\n    }, {});\n  }\n\n  _assignValue(keyframe) {\n    const currentValue = this._currentValues[keyframe.name][\n      keyframe.property\n    ];\n\n    currentValue.value = keyframe.result.value;\n    currentValue.graph = keyframe.result.graph;\n    currentValue.graphHash = keyframe.result.graphHash;\n  }\n\n  _saveCurrentValues() {\n    const visitedMap = new Map();\n    const animators = this.animators;\n    const length = animators.length;\n\n    // Assign all values at least once.\n    // This initials values beyond the time we are at.\n    for (let x = 0; x < length; x++) {\n      const keyframe = animators[x].keyframe;\n      const key = `${keyframe.name}|${keyframe.property}`;\n\n      if (!visitedMap.has(key)) {\n        visitedMap.set(key, true);\n        this._assignValue(keyframe);\n      }\n    }\n\n    // Assign if the value of the start at was before the time now.\n    // Since we have it sorted, the most current will win.\n    for (let x = 0; x < length; x++) {\n      const keyframe = animators[x].keyframe;\n\n      if (keyframe.startAt <= this._time) {\n        this._assignValue(keyframe);\n      }\n    }\n  }\n\n  update(time) {\n    this._time = time;\n    // Update all keyframes\n    this.animators.forEach((animator) => {\n      animator.update(time);\n    });\n\n    this._saveCurrentValues();\n\n    return this;\n  }\n\n  getCurrentValues() {\n    return this._currentValues;\n  }\n\n  merge(timeline) {\n    const oldKeyframes = this.animators.map((a) => a.keyframe);\n    const newKeyframes = timeline.animators.map((a) => a.keyframe);\n\n    this.initialize([...oldKeyframes, ...newKeyframes]);\n\n    return this;\n  }\n}\n"],"file":"Animation.js"}