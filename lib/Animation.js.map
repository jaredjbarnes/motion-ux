{"version":3,"sources":["../src/Animation.js"],"names":["Animation","config","controls","Array","isArray","name","property","to","ParsedValue","from","result","startAt","endAt","map","v","normalizeEasing","validate","value","Error","validateNodes","easing","easings","linear","allStructuresAreEqual","graphHash","x","length","JSON","stringify"],"mappings":"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","sourcesContent":["import easings from \"./easings.js\";\nimport ParsedValue from \"./ParsedValue.js\";\n\nexport default class Animation {\n  constructor(config) {\n    config.controls = Array.isArray(config.controls) ? config.controls : [];\n\n    this.config = config;\n    this.name = config.name;\n    this.property = config.property;\n    this.to = new ParsedValue(config.to);\n    this.from = new ParsedValue(config.from);\n    this.result = new ParsedValue(config.from);\n    this.startAt = config.startAt;\n    this.endAt = config.endAt;\n    this.controls = config.controls.map((v) => new ParsedValue(v));\n\n    this.normalizeEasing();\n    this.validate();\n  }\n\n  setTo(value) {\n    if (!(value instanceof ParsedValue)) {\n      throw new Error(\"The value needs to be a ParsedValue.\");\n    }\n\n    this.to = value;\n    this.validateNodes();\n  }\n\n  setFrom(value) {\n    if (!(value instanceof ParsedValue)) {\n      throw new Error(\"The value needs to be a ParsedValue.\");\n    }\n\n    this.from = value;\n    this.validateNodes();\n  }\n\n  normalizeEasing() {\n    const config = this.config;\n\n    this.easing =\n      typeof config.easing === \"string\"\n        ? easings[config.easing]\n        : config.easing;\n\n    this.config.easing = this.easing = config.easing || easings.linear;\n  }\n\n  validate() {\n    if (typeof this.property !== \"string\") {\n      throw new Error(`The \"property\" property needs to be a string.`);\n    }\n\n    if (typeof this.config.to !== \"string\") {\n      throw new Error(\n        `The \"to\" property needs to be a string, but found ${this.to.value}.`\n      );\n    }\n\n    if (typeof this.config.from !== \"string\") {\n      throw new Error(\n        `The \"from\" property needs to be a string, but found ${this.from.value}.`\n      );\n    }\n\n    if (typeof this.config.name !== \"string\") {\n      throw new Error(\n        `Invalid Arguments: The \"name\" property needs to be an string.`\n      );\n    }\n\n    if (\n      typeof this.config.startAt !== \"number\" ||\n      this.config.startAt < 0 ||\n      this.config.startAt > 1\n    ) {\n      throw new Error(\n        `The \"startAt\" property must be a number between 0 and 1.`\n      );\n    }\n\n    if (\n      typeof this.config.endAt !== \"number\" ||\n      this.config.endAt < 0 ||\n      this.config.endAt > 1\n    ) {\n      throw new Error(`The \"endAt\" property must be a number between 0 and 1.`);\n    }\n\n    if (typeof this.config.easing !== \"function\") {\n      throw new Error(`The \"easing\" property must be a function.`);\n    }\n\n    this.validateNodes();\n  }\n\n  validateNodes() {\n    let allStructuresAreEqual = true;\n\n    if (this.to.graphHash !== this.from.graphHash) {\n      allStructuresAreEqual = false;\n    }\n\n    for (let x = 0; x < this.controls.length; x++) {\n      const value = this.controls[x];\n\n      if (value.graphHash !== this.from.graphHash) {\n        allStructuresAreEqual = false;\n        break;\n      }\n    }\n\n    if (!allStructuresAreEqual) {\n      throw new Error(\n        `Invalid Animation: The value types that are being animated do not match. From: ${JSON.stringify(\n          this.from.value\n        )}, To:${JSON.stringify(this.to.value)}, Controls: ${JSON.stringify(\n          this.controls.map((v) => v.value)\n        )}`\n      );\n    }\n  }\n}\n"],"file":"Animation.js"}