{"version":3,"sources":["../src/Animation.js"],"names":["treeUtility","TreeUtility","treeNormalizer","TreeNormalizer","Animation","config","name","property","to","from","startAt","endAt","controls","Array","isArray","value","normalizeEasing","createNodeTrees","validate","easing","easings","linear","controlNodes","map","c","normalize","cssValue","parse","Cursor","toNode","fromNode","resultNode","clone","Error","valueAt","validateNodes","allTrees","allStructuresAreEqual","every","node","areTreeStructuresEqual","JSON","stringify"],"mappings":"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","sourcesContent":["import easings from \"./easings.js\";\nimport cssValue from \"./patterns/cssValue.js\";\nimport TreeNormalizer from \"./TreeNormalizer.js\";\nimport TreeUtility from \"./TreeUtility.js\";\nimport { Cursor } from \"clarity-pattern-parser\";\n\nconst treeUtility = new TreeUtility();\nconst treeNormalizer = new TreeNormalizer();\n\nexport default class Animation {\n  constructor(config) {\n    this.config = config;\n    this.name = config.name;\n    this.property = config.property;\n    this.to = config.to;\n    this.from = config.from;\n    this.startAt = config.startAt;\n    this.endAt = config.endAt;\n    this.controls = Array.isArray(config.controls)\n      ? config.controls\n      : [];\n    this.value = this.from;\n\n    this.normalizeEasing();\n    this.createNodeTrees();\n    this.validate();\n  }\n\n  normalizeEasing() {\n    const config = this.config;\n\n    this.easing =\n      typeof config.easing === \"string\"\n        ? easings[config.easing]\n        : config.easing;\n    this.easing = config.easing || easings.linear;\n  }\n\n  createNodeTrees() {\n    this.controlNodes = this.controls.map((c) =>\n      treeNormalizer.normalize(cssValue.parse(new Cursor(c)))\n    );\n\n    this.toNode = treeNormalizer.normalize(\n      cssValue.parse(new Cursor(this.to))\n    );\n\n    this.fromNode = treeNormalizer.normalize(\n      cssValue.parse(new Cursor(this.from))\n    );\n\n    this.resultNode = this.fromNode.clone();\n  }\n\n  validate() {\n    if (typeof this.property !== \"string\") {\n      throw new Error(`The \"property\" property needs to be a string.`);\n    }\n\n    if (typeof this.to !== \"string\") {\n      throw new Error(\n        `The \"to\" property needs to be a string, but found ${this.to}.`\n      );\n    }\n\n    if (typeof this.from !== \"string\") {\n      throw new Error(\n        `The \"from\" property needs to be a string, but found ${this.from}.`\n      );\n    }\n\n    if (typeof this.name !== \"string\") {\n      throw new Error(\n        `Invalid Arguments: The \"name\" property needs to be an string.`\n      );\n    }\n\n    if (\n      typeof this.startAt !== \"number\" ||\n      this.startAt < 0 ||\n      this.startAt > 1\n    ) {\n      throw new Error(\n        `The \"startAt\" property must be a number between 0 and 1.`\n      );\n    }\n\n    if (typeof this.endAt !== \"number\" || this.endAt < 0 || this.endAt > 1) {\n      throw new Error(`The \"endAt\" property must be a number between 0 and 1.`);\n    }\n\n    if (this.easing == null || typeof this.easing.valueAt !== \"function\") {\n      throw new Error(`The \"easing\" property must be an instance of Easing.`);\n    }\n\n    this.validateNodes();\n  }\n\n  validateNodes() {\n    const allTrees = [this.fromNode, ...this.controlNodes, this.toNode];\n    const fromNode = this.fromNode;\n\n    const allStructuresAreEqual = allTrees.every((node) => {\n      return treeUtility.areTreeStructuresEqual(fromNode, node);\n    });\n\n    if (!allStructuresAreEqual) {\n      throw new Error(\n        `Invalid Animation: The value types that are being animated do not match. From: ${JSON.stringify(\n          this.from\n        )}, To:${JSON.stringify(this.to)}, Controls: ${JSON.stringify(\n          this.controls\n        )}`\n      );\n    }\n  }\n}\n"],"file":"Animation.js"}