{"version":3,"sources":["../../src/tests/Timeline.js"],"names":["exports","target","clock","MockClock","timeline","Timeline","animations","name","startAt","endAt","from","to","duration","values","getValuesAt","assert","equal","next","value","opacity","play","observe","scrubber","observers","length","state","dispose","throws","message","seek","getCurrentValues","path"],"mappings":"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","sourcesContent":["import Timeline from \"../Timeline.js\";\nimport MockClock from \"../MockClock.js\";\nimport assert from \"assert\";\n\nexports[\"Timeline: Get current values as 0.\"] = () => {\n  const target = {};\n  const clock = new MockClock();\n\n  const timeline = new Timeline({\n    animations: [\n      {\n        target: target,\n        name: \"opacity\",\n        startAt: 0,\n        endAt: 1,\n        from: \"0\",\n        to: \"1\"\n      }\n    ],\n    duration: 1000,\n    clock: clock\n  });\n\n  const values = timeline.getValuesAt(0);\n\n  assert.equal(values.values().next().value.opacity, 0);\n};\n\nexports[\"Timeline: Dispose.\"] = () => {\n  const target = {};\n  const clock = new MockClock();\n\n  const timeline = new Timeline({\n    animations: [\n      {\n        target: target,\n        name: \"opacity\",\n        startAt: 0,\n        endAt: 1,\n        from: \"0\",\n        to: \"1\"\n      }\n    ],\n    duration: 1000,\n    clock\n  });\n\n  timeline.play();\n\n  timeline.observe(\"RENDER\", () => {});\n  assert.equal(timeline.scrubber.observers.length, 1);\n  assert.equal(timeline.scrubber.state, 1);\n\n  timeline.dispose();\n  assert.equal(timeline.scrubber.observers.length, 0);\n  assert.equal(timeline.scrubber.state, 0);\n};\n\nexports[\"Timeline: Animated value types do not match.\"] = () => {\n  const target = {};\n  const clock = new MockClock();\n\n  assert.throws(\n    () => {\n      new Timeline({\n        animations: [\n          {\n            target: target,\n            name: \"opacity\",\n            startAt: 0,\n            endAt: 1,\n            from: \"0px\",\n            to: \"1\"\n          }\n        ],\n        duration: 1000,\n        clock\n      });\n    },\n    {\n      message: `Invalid Animation: The value types that are being animated do not match. From: \"0px\", To:\"1\", Controls: []`\n    }\n  );\n};\n\nexports[\"Timeline: Valid Path.\"] = () => {\n  const target = {};\n  const clock = new MockClock();\n  const from =\n    \"M 10 315 L 110 215 A 30 50 0 0 1 162.55 162.45 L 172.55 152.45 A 30 50 -45 0 1 215.1 109.9 L 315 10\";\n  const to =\n    \"M 10 315 L 110 400 A 30 50 0 0 1 162.55 162.45 L 172.55 152.45 A 30 50 -45 0 1 215.1 149.9 L 315 10\";\n\n  const timeline = new Timeline({\n    animations: [\n      {\n        target: target,\n        name: \"path\",\n        startAt: 0,\n        endAt: 1,\n        from: from,\n        to: to\n      }\n    ],\n    duration: 1000,\n    clock\n  });\n\n  timeline.seek(1);\n  const value = timeline\n    .getCurrentValues()\n    .values()\n    .next().value.path;\n\n  assert.equal(value, to);\n};\n"],"file":"Timeline.js"}