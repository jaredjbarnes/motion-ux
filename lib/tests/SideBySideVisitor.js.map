{"version":3,"sources":["../../src/tests/SideBySideVisitor.js"],"names":["exports","nodeAVisits","nodeBVisits","visitor","SideBySideVisitor","node1","node2","Array","isArray","children","push","value","composite","CompositeNode","child1","ValueNode","child2","clone","visitUp","assert","equal","join","nodeCVisits","node3","clone2","visitDown"],"mappings":"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","sourcesContent":["import assert from \"assert\";\nimport SideBySideVisitor from \"../SideBySideVisitor.js\";\nimport { CompositeNode, ValueNode } from \"clarity-pattern-parser\";\nimport { node } from \"webpack\";\n\nexports[\"SideBySideVisitor: Two nodes.\"] = () => {\n  const nodeAVisits = [];\n  const nodeBVisits = [];\n\n  const visitor = new SideBySideVisitor((node1, node2) => {\n    if (!Array.isArray(node1.children)) {\n      nodeAVisits.push(node1.value);\n    }\n\n    if (!Array.isArray(node2.children)) {\n      nodeBVisits.push(node2.value);\n    }\n  });\n\n  const composite = new CompositeNode(\"and-composite\", \"parent\");\n  const child1 = new ValueNode(\"value\", \"child\", \"Kendi\");\n  const child2 = new ValueNode(\"value\", \"child\", \"Aydri\");\n\n  composite.children.push(child1, child2);\n\n  const clone = composite.clone();\n\n  visitor.visitUp([composite, clone]);\n\n  assert.equal(nodeAVisits.join(\"|\"), \"Kendi|Aydri\");\n  assert.equal(nodeBVisits.join(\"|\"), \"Kendi|Aydri\");\n};\n\nexports[\"SideBySideVisitor: Three nodes.\"] = () => {\n  const nodeAVisits = [];\n  const nodeBVisits = [];\n  const nodeCVisits = [];\n\n  const visitor = new SideBySideVisitor((node1, node2, node3) => {\n    if (!Array.isArray(node1.children)) {\n      nodeAVisits.push(node1.value);\n    }\n\n    if (!Array.isArray(node2.children)) {\n      nodeBVisits.push(node2.value);\n    }\n\n    if (!Array.isArray(node3.children)) {\n      nodeCVisits.push(node3.value);\n    }\n  });\n\n  const composite = new CompositeNode(\"and-composite\", \"parent\");\n  const child1 = new ValueNode(\"value\", \"child\", \"Kendi\");\n  const child2 = new ValueNode(\"value\", \"child\", \"Aydri\");\n\n  composite.children.push(child1, child2);\n\n  const clone = composite.clone();\n  const clone2 = composite.clone();\n\n  visitor.visitUp([composite, clone, clone2]);\n\n  assert.equal(nodeAVisits.join(\"|\"), \"Kendi|Aydri\");\n  assert.equal(nodeBVisits.join(\"|\"), \"Kendi|Aydri\");\n  assert.equal(nodeCVisits.join(\"|\"), \"Kendi|Aydri\");\n};\n\nexports[\"SideBySideVisitor: Without callback.\"] = () => {\n  const visitor = new SideBySideVisitor();\n  const composite = new CompositeNode(\"and-composite\", \"parent\");\n  const child1 = new ValueNode(\"value\", \"child\", \"Kendi\");\n  const child2 = new ValueNode(\"value\", \"child\", \"Aydri\");\n\n  composite.children.push(child1, child2);\n  visitor.visitDown(composite);\n\n};\n\n"],"file":"SideBySideVisitor.js"}