{"version":3,"sources":["../../src/tests/GraphOperator.js"],"names":["exports","left","ParsedValue","right","result","clone","graphs","graph","graphOperator","GraphOperator","add","stringResult","toString","assert","strictEqual","subtract","multiply","divide","assign"],"mappings":"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","sourcesContent":["import assert from \"assert\";\nimport GraphOperator from \"../GraphOperator.js\";\nimport ParsedValue from \"../ParsedValue.js\";\n\nexports[\"GraphOperator: Add\"] = () => {\n  const left = new ParsedValue(\"rgba(100,100,100,0.5)\");\n  const right = new ParsedValue(\"rgba(100,100,100,0)\");\n  const result = right.clone();\n\n  const graphs = [left.graph, right.graph, result.graph];\n\n  const graphOperator = new GraphOperator();\n  graphOperator.add(graphs);\n\n  const stringResult = result.graph.toString();\n\n  assert.strictEqual(stringResult, \"rgba(200, 200, 200, 0.5)\");\n};\n\nexports[\"GraphOperator: Subtract\"] = () => {\n  const left = new ParsedValue(\"rgba(100,100,100,0.5)\");\n  const right = new ParsedValue(\"rgba(100,100,100,0)\");\n  const result = right.clone();\n\n  const graphs = [left.graph, right.graph, result.graph];\n\n  const graphOperator = new GraphOperator();\n  graphOperator.subtract(graphs);\n\n  const stringResult = result.graph.toString();\n\n  assert.strictEqual(stringResult, \"rgba(0, 0, 0, 0.5)\");\n};\n\nexports[\"GraphOperator: Multiply\"] = () => {\n  const left = new ParsedValue(\"rgba(2,2,2,0.5)\");\n  const right = new ParsedValue(\"rgba(2,2,2,0)\");\n  const result = right.clone();\n\n  const graphs = [left.graph, right.graph, result.graph];\n\n  const graphOperator = new GraphOperator();\n  graphOperator.multiply(graphs);\n\n  const stringResult = result.graph.toString();\n\n  assert.strictEqual(stringResult, \"rgba(4, 4, 4, 0)\");\n};\n\nexports[\"GraphOperator: Divide\"] = () => {\n  const left = new ParsedValue(\"rgba(2,2,2,0.5)\");\n  const right = new ParsedValue(\"rgba(2,2,2,1)\");\n  const result = right.clone();\n\n  const graphs = [left.graph, right.graph, result.graph];\n\n  const graphOperator = new GraphOperator();\n  graphOperator.divide(graphs);\n\n  const stringResult = result.graph.toString();\n\n  assert.strictEqual(stringResult, \"rgba(1, 1, 1, 0.5)\");\n};\n\nexports[\"GraphOperator: assign\"] = () => {\n  const left = new ParsedValue(\"rgba(2,2,2,1)\");\n\n  const graphOperator = new GraphOperator();\n  graphOperator.assign(left.graph, 1);\n\n  const stringResult = left.graph.toString();\n\n  assert.strictEqual(stringResult, \"rgba(1, 1, 1, 1)\");\n};\n"],"file":"GraphOperator.js"}