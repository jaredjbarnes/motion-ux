{"version":3,"sources":["../../src/tests/values.js"],"names":["exports","cursor","Cursor","node","values","parse","assert","equal","name","children","value"],"mappings":"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","sourcesContent":["import { Cursor } from \"clarity-pattern-parser\";\nimport values from \"../patterns/values.js\";\nimport method from \"../patterns/method.js\";\nimport assert from \"assert\";\n\nexports[\"Patterns: single unit\"] = () => {\n  const cursor = new Cursor(\"0px\");\n\n  const node = values.parse(cursor);\n\n  assert.equal(node.name, \"values\");\n  assert.equal(node.children[0].name, \"unit\");\n  assert.equal(node.children[0].children[0].name, \"number\");\n  assert.equal(node.children[0].children[1].name, \"unit-type\");\n  assert.equal(node.children[0].children[0].value, \"0\");\n  assert.equal(node.children[0].children[1].value, \"px\");\n};\n\nexports[\"Patterns: multiple units\"] = () => {\n  const cursor = new Cursor(\"0px 0px\");\n\n  const node = values.parse(cursor);\n\n  assert.equal(node.name, \"values\");\n  assert.equal(node.children[0].name, \"unit\");\n  assert.equal(node.children[0].children[0].name, \"number\");\n  assert.equal(node.children[0].children[1].name, \"unit-type\");\n  assert.equal(node.children[0].children[0].value, \"0\");\n  assert.equal(node.children[0].children[1].value, \"px\");\n\n  assert.equal(node.children[2].children[0].name, \"number\");\n  assert.equal(node.children[2].children[1].name, \"unit-type\");\n  assert.equal(node.children[2].children[0].value, \"0\");\n  assert.equal(node.children[2].children[1].value, \"px\");\n};\n\nexports[\"Patterns: three hex\"] = () => {\n  const cursor = new Cursor(\"#000\");\n\n  const node = values.parse(cursor);\n\n  assert.equal(node.name, \"values\");\n  assert.equal(node.children[0].name, \"hex\");\n  assert.equal(node.children[0].value, \"#000\");\n};\n\nexports[\"Patterns: six hex\"] = () => {\n  const cursor = new Cursor(\"#000000\");\n\n  const node = values.parse(cursor);\n\n  assert.equal(node.name, \"values\");\n  assert.equal(node.children[0].name, \"hex\");\n  assert.equal(node.children[0].value, \"#000000\");\n};\n\nexports[\"Patterns: single name string\"] = () => {\n  const cursor = new Cursor(\"left\");\n\n  const node = values.parse(cursor);\n\n  assert.equal(node.name, \"values\");\n  assert.equal(node.children[0].name, \"name\");\n  assert.equal(node.children[0].value, \"left\");\n};\n\nexports[\"Patterns: mulitple name string\"] = () => {\n  const cursor = new Cursor(\"top left\");\n\n  const node = values.parse(cursor);\n\n  assert.equal(node.name, \"values\");\n  assert.equal(node.children[0].name, \"name\");\n  assert.equal(node.children[0].value, \"top\");\n  assert.equal(node.children[2].name, \"name\");\n  assert.equal(node.children[2].value, \"left\");\n};\n\nexports[\"Patterns: empty method\"] = () => {\n  const cursor = new Cursor(\"translate()\");\n  const node = values.parse(cursor);\n\n  assert.equal(node.name, \"values\");\n  assert.equal(node.children[0].name, \"method\");\n  assert.equal(node.children[0].children[0].name, \"name\");\n  assert.equal(node.children[0].children[1].name, \"open-paren\");\n  assert.equal(node.children[0].children[2].name, \"close-paren\");\n};\n\nexports[\"Patterns: method, one argument\"] = () => {\n  const cursor = new Cursor(\"translate(0px)\");\n  const node = values.parse(cursor);\n\n  assert.equal(node.name, \"values\");\n  assert.equal(node.children[0].name, \"method\");\n  assert.equal(node.children[0].children[0].name, \"name\");\n  assert.equal(node.children[0].children[1].name, \"open-paren\");\n  assert.equal(node.children[0].children[2].name, \"arguments\");\n  assert.equal(node.children[0].children[3].name, \"close-paren\");\n  assert.equal(node.children[0].children[2].children[0].name, \"values\");\n  assert.equal(\n    node.children[0].children[2].children[0].children[0].name,\n    \"unit\"\n  );\n  assert.equal(\n    node.children[0].children[2].children[0].children[0].children[0].name,\n    \"number\"\n  );\n  assert.equal(\n    node.children[0].children[2].children[0].children[0].children[1].name,\n    \"unit-type\"\n  );\n};\n\nexports[\"Patterns: method, mulitple arguments\"] = () => {\n  const cursor = new Cursor(\"translate(0px, 0px)\");\n  const node = values.parse(cursor);\n\n  assert.equal(node.name, \"values\");\n  assert.equal(node.children[0].name, \"method\");\n  assert.equal(node.children[0].children[0].name, \"name\");\n  assert.equal(node.children[0].children[1].name, \"open-paren\");\n  assert.equal(node.children[0].children[2].name, \"arguments\");\n  assert.equal(node.children[0].children[3].name, \"close-paren\");\n  assert.equal(node.children[0].children[2].children[0].name, \"values\");\n  assert.equal(\n    node.children[0].children[2].children[0].children[0].name,\n    \"unit\"\n  );\n  assert.equal(\n    node.children[0].children[2].children[0].children[0].children[0].name,\n    \"number\"\n  );\n  assert.equal(\n    node.children[0].children[2].children[0].children[0].children[1].name,\n    \"unit-type\"\n  );\n};\n\nexports[\"Patterns: method, mulitple arguments\"] = () => {\n  const cursor = new Cursor(\n    \"linear-gradient(to left, #333, #333 50%, #eee 75%, #333 75%)\"\n  );\n  const node = values.parse(cursor);\n};\n\nexports[\"Patterns: multiple methods, mulitple arguments\"] = () => {\n  const cursor = new Cursor(\n    \"linear-gradient(to left, #333, #333 50%, #eee 75%, #333 75%) linear-gradient(to bottom, #555, #555 50%, #eee 75%, #555 75%)\"\n  );\n  const node = values.parse(cursor);\n};\n\n\nexports[\"Patterns: multiple methods, mulitple arguments, with other values\"] = () => {\n    const cursor = new Cursor(\n      \"#222 linear-gradient(to left, #333, #333 50%, #eee 75%, #333 75%) linear-gradient(to bottom, #555, #555 50%, #eee 75%, #555 75%)\"\n    );\n    const node = values.parse(cursor);\n  };\n  "],"file":"values.js"}