{"version":3,"sources":["../src/KeyframeConfigValidator.js"],"names":["KeyframeConfigValidator","config","hasValidToAsString","Error","setConfig","validateName","validateProperty","validateToAsParsedValue","validateControlsAsParsedValues","validateFromAsParsedValue","validateStartAt","validateEndAt","validateEasingFunction","validateNodes","validateConfig","hasValidName","name","hasValidProperty","property","to","hasValidToAsParsedValue","ParsedValue","from","hasValidFromAsParsedValue","hasValidControlsAsStrings","controls","Array","isArray","every","control","hasValidControlsAsParsedValues","hasValidStartAt","startAt","hasValidEndAt","endAt","hasValidEasingString","easing","hasValidEasingFunction","areGraphStructuresEqual","JSON","stringify","value","map","v","allStructuresAreEqual","graphHash","x","length"],"mappings":"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","sourcesContent":["import ParsedValue from \"./ParsedValue\";\n\nexport default class KeyframeConfigValidator {\n  constructor() {\n    this.config = null;\n  }\n\n  setConfig(config) {\n    this.config = config;\n  }\n\n  isSimpleConfig() {\n    return this.hasValidToAsString();\n  }\n\n  validateConfig() {\n    if (this.config == null) {\n      throw new Error(\n        `Invalid Arguments: The \"config\" cannot be null or undefined.`\n      );\n    }\n  }\n\n  validate(config) {\n    this.setConfig(config);\n    this.validateName();\n    this.validateProperty();\n    this.validateToAsParsedValue();\n    this.validateControlsAsParsedValues();\n    this.validateFromAsParsedValue();\n    this.validateStartAt();\n    this.validateEndAt();\n    this.validateEasingFunction();\n    this.validateNodes();\n  }\n\n  validateName() {\n    this.validateConfig();\n\n    if (!this.hasValidName()) {\n      throw new Error(\n        `Invalid Arguments: The \"name\" property needs to be an string.`\n      );\n    }\n  }\n\n  hasValidName() {\n    return typeof this.config.name === \"string\";\n  }\n\n  validateProperty() {\n    this.validateConfig();\n\n    if (!this.hasValidProperty()) {\n      throw new Error(`The \"property\" property needs to be a string.`);\n    }\n  }\n\n  hasValidProperty() {\n    return typeof this.config.property === \"string\";\n  }\n\n  validateToAsString() {\n    this.validateConfig();\n\n    if (!this.hasValidToAsString()) {\n      throw new Error(\n        `The \"to\" property needs to be a string, but found ${this.config.to}.`\n      );\n    }\n  }\n\n  hasValidToAsString() {\n    return typeof this.config.to === \"string\";\n  }\n\n  validateToAsParsedValue() {\n    this.validateConfig();\n\n    if (!this.hasValidToAsParsedValue()) {\n      throw new Error(\n        `The \"to\" property needs to be a ParsedValue, but found ${this.config.to}.`\n      );\n    }\n  }\n\n  hasValidToAsParsedValue() {\n    return this.config.to instanceof ParsedValue;\n  }\n\n  validateFromAsString() {\n    this.validateConfig();\n\n    if (typeof this.config.from !== \"string\") {\n      throw new Error(\n        `The \"from\" property needs to be a string, but found ${this.config.from}.`\n      );\n    }\n  }\n\n  hasValidFromAsString() {\n    return typeof this.config.from === \"string\";\n  }\n\n  validateFromAsParsedValue() {\n    this.validateConfig();\n\n    if (!this.hasValidFromAsParsedValue()) {\n      throw new Error(\n        `The \"from\" property needs to be a ParsedValue, but found ${this.config.from}.`\n      );\n    }\n  }\n\n  hasValidFromAsParsedValue() {\n    return this.config.from instanceof ParsedValue;\n  }\n\n  validateControlsAsStrings() {\n    this.validateConfig();\n\n    if (!this.hasValidControlsAsStrings()) {\n      throw new Error(\n        `The \"controls\" property needs to be made of strings, but found ${this.config.controls}.`\n      );\n    }\n  }\n\n  hasValidControlsAsStrings() {\n    return (\n      Array.isArray(this.config.controls) &&\n      this.config.controls.every((control) => typeof control === \"string\")\n    );\n  }\n\n  validateControlsAsParsedValues() {\n    this.validateConfig();\n\n    if (!this.hasValidControlsAsParsedValues()) {\n      throw new Error(\n        `The \"controls\" property needs to be made of ParsedValues, but found ${this.config.controls}.`\n      );\n    }\n  }\n\n  hasValidControlsAsParsedValues() {\n    return this.config.controls.every(\n      (control) => control instanceof ParsedValue\n    );\n  }\n\n  validateStartAt() {\n    this.validateConfig();\n\n    if (!this.hasValidStartAt) {\n      throw new Error(\n        `The \"startAt\" property must be a number between 0 and 1.`\n      );\n    }\n  }\n\n  hasValidStartAt() {\n    return (\n      typeof this.config.startAt === \"number\" &&\n      this.config.startAt >= 0 &&\n      this.config.startAt <= 1\n    );\n  }\n\n  validateEndAt() {\n    this.validateConfig();\n\n    if (!this.hasValidEndAt()) {\n      throw new Error(`The \"endAt\" property must be a number between 0 and 1.`);\n    }\n  }\n\n  hasValidEndAt() {\n    return (\n      typeof this.config.endAt === \"number\" &&\n      this.config.endAt >= 0 &&\n      this.config.endAt <= 1\n    );\n  }\n\n  validateEasingString() {\n    this.validateConfig();\n\n    if (!this.hasValidEasingString()) {\n      throw new Error(`The \"easing\" property must be a string.`);\n    }\n  }\n\n  hasValidEasingString() {\n    return typeof this.config.easing === \"string\";\n  }\n\n  validateEasingFunction() {\n    this.validateConfig();\n\n    if (!this.hasValidEasingFunction()) {\n      throw new Error(`The \"easing\" property must be a function.`);\n    }\n  }\n\n  hasValidEasingFunction() {\n    return typeof this.config.easing === \"function\";\n  }\n\n  validateNodes() {\n    this.validateConfig();\n    const config = this.config;\n\n    if (!this.areGraphStructuresEqual()) {\n      throw new Error(\n        `Invalid Keyframe: The value types that are being animated do not match. From: ${JSON.stringify(\n          config.from.value\n        )}, To:${JSON.stringify(config.to.value)}, Controls: ${JSON.stringify(\n          config.controls.map((v) => v.value)\n        )}`\n      );\n    }\n  }\n\n  areGraphStructuresEqual() {\n    let allStructuresAreEqual = true;\n    const config = this.config;\n\n    if (config.to.graphHash !== config.from.graphHash) {\n      allStructuresAreEqual = false;\n    }\n\n    for (let x = 0; x < config.controls.length; x++) {\n      const value = config.controls[x];\n\n      if (value.graphHash !== config.from.graphHash) {\n        allStructuresAreEqual = false;\n        break;\n      }\n    }\n\n    return allStructuresAreEqual;\n  }\n}\n"],"file":"KeyframeConfigValidator.js"}