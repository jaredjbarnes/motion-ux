{"version":3,"sources":["../src/BezierCurve.js"],"names":["BezierCurve","points","percentage","reducedPoints","reduce","point","index","length","nextPoint","push","reduceToPoint","validatePoints","value","console","log","Error","controlPoints","slice","forEach","assertValidPoint"],"mappings":";;;;;;;;;;;;;IAAqBA,W;;;AACnB,uBAAYC,MAAZ,EAAoB;AAAA;;AAClB,SAAKA,MAAL,GAAcA,MAAd;AACA,SAAKC,UAAL,GAAkB,CAAlB;AACD;;;;kCAEaD,M,EAAQ;AAAA;;AACpB,UAAME,aAAa,GAAGF,MAAM,CAACG,MAAP,CAAc,UAACD,aAAD,EAAgBE,KAAhB,EAAuBC,KAAvB,EAAiC;AACnE,YAAIA,KAAK,KAAKL,MAAM,CAACM,MAAP,GAAgB,CAA9B,EAAiC;AAC/B,cAAMC,SAAS,GAAGP,MAAM,CAACK,KAAK,GAAG,CAAT,CAAxB;AACAH,UAAAA,aAAa,CAACM,IAAd,CAAmB,CAACD,SAAS,GAAGH,KAAb,IAAsB,KAAI,CAACH,UAA3B,GAAwCG,KAA3D;AACD;;AAED,eAAOF,aAAP;AACD,OAPqB,EAOnB,EAPmB,CAAtB;;AASA,UAAIA,aAAa,CAACI,MAAd,GAAuB,CAA3B,EAA8B;AAC5B,eAAO,KAAKG,aAAL,CAAmBP,aAAnB,CAAP;AACD;;AAED,aAAOA,aAAa,CAAC,CAAD,CAApB;AACD;;;4BAEOD,U,EAAY;AAClB,WAAKA,UAAL,GAAkBA,UAAlB;AAEA,WAAKS,cAAL;AACA,UAAMC,KAAK,GAAG,KAAKF,aAAL,CAAmB,KAAKT,MAAxB,CAAd;AACAY,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKb,MAAjB,EAAyB,KAAKC,UAA9B,EAA0CU,KAA1C;AACA,aAAOA,KAAP;AACD;;;qCAEgB;AAAA;;AACf,UAAI,KAAKX,MAAL,CAAYM,MAAZ,GAAqB,CAAzB,EAA4B;AAC1B,cAAM,IAAIQ,KAAJ,CAAU,qDAAV,CAAN;AACD;;AAED,UAAMC,aAAa,GAAG,KAAKf,MAAL,CAAYgB,KAAZ,CAAkB,CAAlB,EAAqB,KAAKhB,MAAL,CAAYM,MAAZ,GAAqB,CAA1C,CAAtB;AAEAS,MAAAA,aAAa,CAACE,OAAd,CAAsB,UAAAb,KAAK;AAAA,eAAI,MAAI,CAACc,gBAAL,CAAsBd,KAAtB,CAAJ;AAAA,OAA3B;AACD;;;qCAEgBA,K,EAAO;AACtB,UAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7B,cAAM,IAAIU,KAAJ,CAAU,2CAAV,CAAN;AACD;AACF","sourcesContent":["export default class BezierCurve {\n  constructor(points) {\n    this.points = points;\n    this.percentage = 0;\n  }\n\n  reduceToPoint(points) {\n    const reducedPoints = points.reduce((reducedPoints, point, index) => {\n      if (index !== points.length - 1) {\n        const nextPoint = points[index + 1];\n        reducedPoints.push((nextPoint - point) * this.percentage + point);\n      }\n\n      return reducedPoints;\n    }, []);\n\n    if (reducedPoints.length > 1) {\n      return this.reduceToPoint(reducedPoints);\n    }\n\n    return reducedPoints[0];\n  }\n\n  valueAt(percentage) {\n    this.percentage = percentage;\n\n    this.validatePoints();\n    const value = this.reduceToPoint(this.points);\n    console.log(this.points, this.percentage, value);\n    return value;\n  }\n\n  validatePoints() {\n    if (this.points.length < 2) {\n      throw new Error(\"Invalid Points: The points need to be at least two.\");\n    }\n\n    const controlPoints = this.points.slice(1, this.points.length - 2);\n\n    controlPoints.forEach(point => this.assertValidPoint(point));\n  }\n\n  assertValidPoint(point) {\n    if (typeof point !== \"number\") {\n      throw new Error(\"Invalid point: Points need to be numbers.\");\n    }\n  }\n}\n"],"file":"BezierCurve.js"}