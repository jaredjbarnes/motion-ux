{"version":3,"sources":["../src/BezierCurve.js"],"names":["BezierCurve","points","reducedPoints","Array","length","Object","freeze","slice","percentage","x","innerLength","y","nextPoint","point","Error","controlPoints","forEach","assertValidPoint"],"mappings":";;;;;;;;;;;;;IAAqBA,W;;;AACnB,uBAAYC,MAAZ,EAAoB;AAAA;;AAClB,SAAKA,MAAL,GAAcA,MAAd;AACA,SAAKC,aAAL,GAAqB,IAAIC,KAAJ,CAAUF,MAAM,CAACG,MAAjB,CAArB;AAEAC,IAAAA,MAAM,CAACC,MAAP,CAAc,KAAKL,MAAnB;AACD;;;;4BAEO;AACN,aAAO,IAAID,WAAJ,CAAgB,KAAKC,MAAL,CAAYM,KAAZ,EAAhB,CAAP;AACD;;;4BAEOC,U,EAAY;AAClB,UAAMP,MAAM,GAAG,KAAKA,MAApB;AACA,UAAMC,aAAa,GAAG,KAAKA,aAA3B;AACA,UAAME,MAAM,GAAGH,MAAM,CAACG,MAAtB;;AAEA,WAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,MAApB,EAA4BK,CAAC,EAA7B,EAAiC;AAC/BP,QAAAA,aAAa,CAACO,CAAD,CAAb,GAAmBR,MAAM,CAACQ,CAAD,CAAzB;AACD;;AAED,WAAK,IAAIA,EAAC,GAAG,CAAb,EAAgBA,EAAC,GAAGL,MAApB,EAA4BK,EAAC,EAA7B,EAAiC;AAC/B,YAAMC,WAAW,GAAGN,MAAM,GAAGK,EAAT,GAAa,CAAjC;;AAEA,aAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,WAApB,EAAiCC,CAAC,EAAlC,EAAsC;AACpC,cAAMC,SAAS,GAAGV,aAAa,CAACS,CAAC,GAAG,CAAL,CAA/B;AACA,cAAME,KAAK,GAAGX,aAAa,CAACS,CAAD,CAA3B;AAEAT,UAAAA,aAAa,CAACS,CAAD,CAAb,GAAmB,CAACC,SAAS,GAAGC,KAAb,IAAsBL,UAAtB,GAAmCK,KAAtD;AACD;AACF;;AAED,aAAOX,aAAa,CAAC,CAAD,CAApB;AACD;;;qCAEgB;AAAA;;AACf,UAAI,KAAKD,MAAL,CAAYG,MAAZ,GAAqB,CAAzB,EAA4B;AAC1B,cAAM,IAAIU,KAAJ,CAAU,qDAAV,CAAN;AACD;;AAED,UAAMC,aAAa,GAAG,KAAKd,MAAL,CAAYM,KAAZ,CAAkB,CAAlB,EAAqB,KAAKN,MAAL,CAAYG,MAAZ,GAAqB,CAA1C,CAAtB;AAEAW,MAAAA,aAAa,CAACC,OAAd,CAAsB,UAACH,KAAD;AAAA,eAAW,KAAI,CAACI,gBAAL,CAAsBJ,KAAtB,CAAX;AAAA,OAAtB;AACD;;;qCAEgBA,K,EAAO;AACtB,UAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7B,cAAM,IAAIC,KAAJ,CAAU,2CAAV,CAAN;AACD;AACF","sourcesContent":["export default class BezierCurve {\n  constructor(points) {\n    this.points = points;\n    this.reducedPoints = new Array(points.length);\n\n    Object.freeze(this.points);\n  }\n\n  clone() {\n    return new BezierCurve(this.points.slice());\n  }\n\n  valueAt(percentage) {\n    const points = this.points;\n    const reducedPoints = this.reducedPoints;\n    const length = points.length;\n\n    for (let x = 0; x < length; x++) {\n      reducedPoints[x] = points[x];\n    }\n\n    for (let x = 0; x < length; x++) {\n      const innerLength = length - x - 1;\n\n      for (let y = 0; y < innerLength; y++) {\n        const nextPoint = reducedPoints[y + 1];\n        const point = reducedPoints[y];\n\n        reducedPoints[y] = (nextPoint - point) * percentage + point;\n      }\n    }\n\n    return reducedPoints[0];\n  }\n\n  validatePoints() {\n    if (this.points.length < 2) {\n      throw new Error(\"Invalid Points: The points need to be at least two.\");\n    }\n\n    const controlPoints = this.points.slice(1, this.points.length - 2);\n\n    controlPoints.forEach((point) => this.assertValidPoint(point));\n  }\n\n  assertValidPoint(point) {\n    if (typeof point !== \"number\") {\n      throw new Error(\"Invalid point: Points need to be numbers.\");\n    }\n  }\n}\n"],"file":"BezierCurve.js"}