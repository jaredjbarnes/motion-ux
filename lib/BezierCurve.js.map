{"version":3,"sources":["../src/BezierCurve.js"],"names":["BezierCurve","points","percentage","reducedPoints","reduce","point","index","length","nextPoint","push","x","y","reduceToPoint","result","validatePoints","assertPercentage","Error","controlPoints","slice","forEach","assertValidPoint","assertStartPoint","assertEndPoint","startPoint","endPoint"],"mappings":";;;;;;;;;;;;;IAAqBA,W;;;AACnB,uBAAYC,MAAZ,EAAoB;AAAA;;AAClB,SAAKA,MAAL,GAAcA,MAAd;AACA,SAAKC,UAAL,GAAkB,CAAlB;AACD;;;;kCAEaD,M,EAAQ;AAAA;;AACpB,UAAME,aAAa,GAAGF,MAAM,CAACG,MAAP,CAAc,UAACD,aAAD,EAAgBE,KAAhB,EAAuBC,KAAvB,EAAiC;AACnE,YAAIA,KAAK,KAAKL,MAAM,CAACM,MAAP,GAAgB,CAA9B,EAAiC;AAC/B,cAAMC,SAAS,GAAGP,MAAM,CAACK,KAAK,GAAG,CAAT,CAAxB;AACAH,UAAAA,aAAa,CAACM,IAAd,CAAmB;AACjBC,YAAAA,CAAC,EAAE,CAACF,SAAS,CAACE,CAAV,GAAcL,KAAK,CAACK,CAArB,IAA0B,KAAI,CAACR,UADjB;AAEjBS,YAAAA,CAAC,EAAE,CAACH,SAAS,CAACG,CAAV,GAAcN,KAAK,CAACM,CAArB,IAA0B,KAAI,CAACT;AAFjB,WAAnB;AAID;;AAED,eAAOC,aAAP;AACD,OAVqB,EAUnB,EAVmB,CAAtB;;AAYA,UAAIA,aAAa,CAACI,MAAd,GAAuB,CAA3B,EAA8B;AAC5B,eAAO,KAAKK,aAAL,CAAmBC,MAAnB,CAAP;AACD;;AAED,aAAOV,aAAP;AACD;;;qCAEgBD,U,EAAY;AAC3B,WAAKA,UAAL,GAAkBA,UAAlB;AAEA,WAAKY,cAAL;AACA,WAAKC,gBAAL;AACA,aAAO,KAAKH,aAAL,CAAmB,KAAKX,MAAxB,CAAP;AACD;;;qCAEgB;AAAA;;AACf,UAAI,KAAKA,MAAL,CAAYM,MAAZ,GAAqB,CAAzB,EAA2B;AACvB,cAAM,IAAIS,KAAJ,CAAU,qDAAV,CAAN;AACH;;AAED,UAAMC,aAAa,GAAG,KAAKhB,MAAL,CAAYiB,KAAZ,CAAkB,CAAlB,EAAqB,KAAKjB,MAAL,CAAYM,MAAZ,GAAqB,CAA1C,CAAtB;AAEAU,MAAAA,aAAa,CAACE,OAAd,CAAsB,UAAAd,KAAK;AAAA,eAAI,MAAI,CAACe,gBAAL,CAAsBf,KAAtB,CAAJ;AAAA,OAA3B;AACA,WAAKgB,gBAAL;AACA,WAAKC,cAAL;AACD;;;qCAEgBjB,K,EAAO;AACtB,UAAI,OAAOA,KAAK,CAACK,CAAb,KAAmB,QAAvB,EAAiC;AAC/B,cAAM,IAAIM,KAAJ,CAAU,mDAAV,CAAN;AACD;;AAED,UAAI,OAAOX,KAAK,CAACM,CAAb,KAAmB,QAAvB,EAAiC;AAC/B,cAAM,IAAIK,KAAJ,CAAU,mDAAV,CAAN;AACD;AACF;;;uCAEkB;AACjB,UAAMO,UAAU,GAAG,KAAKtB,MAAL,CAAY,CAAZ,CAAnB;;AAEA,UAAIsB,UAAU,CAACb,CAAX,KAAiB,CAArB,EAAuB;AACnB,cAAM,IAAIM,KAAJ,CAAU,4DAAV,CAAN;AACH;AACF;;;qCAEgB;AACf,UAAMQ,QAAQ,GAAG,KAAKvB,MAAL,CAAY,KAAKI,KAAL,CAAWC,KAAX,GAAiB,CAA7B,CAAjB;;AAEA,UAAIkB,QAAQ,CAACd,CAAT,KAAe,CAAnB,EAAqB;AACjB,cAAM,IAAIM,KAAJ,CAAU,0DAAV,CAAN;AACH;AACF;;;uCAEkB;AACjB,UAAI,KAAKd,UAAL,GAAkB,CAAlB,IAAuB,KAAKA,UAAL,GAAkB,CAA7C,EAAgD;AAC9C,cAAM,IAAIc,KAAJ,CACJ,6DADI,CAAN;AAGD;AACF","sourcesContent":["export default class BezierCurve {\n  constructor(points) {\n    this.points = points;\n    this.percentage = 0;\n  }\n\n  reduceToPoint(points) {\n    const reducedPoints = points.reduce((reducedPoints, point, index) => {\n      if (index !== points.length - 1) {\n        const nextPoint = points[index + 1];\n        reducedPoints.push({\n          x: (nextPoint.x - point.x) * this.percentage,\n          y: (nextPoint.y - point.y) * this.percentage\n        });\n      }\n\n      return reducedPoints;\n    }, []);\n\n    if (reducedPoints.length > 1) {\n      return this.reduceToPoint(result);\n    }\n\n    return reducedPoints;\n  }\n\n  calculatePointAt(percentage) {\n    this.percentage = percentage;\n\n    this.validatePoints();\n    this.assertPercentage();\n    return this.reduceToPoint(this.points);\n  }\n\n  validatePoints() {\n    if (this.points.length > 1){\n        throw new Error(\"Invalid Points: The points need to be at least two.\");\n    }\n\n    const controlPoints = this.points.slice(1, this.points.length - 2);\n\n    controlPoints.forEach(point => this.assertValidPoint(point));\n    this.assertStartPoint();\n    this.assertEndPoint();\n  }\n\n  assertValidPoint(point) {\n    if (typeof point.x !== \"number\") {\n      throw new Error(\"Invalid point: Points need to have an x property.\");\n    }\n\n    if (typeof point.y !== \"number\") {\n      throw new Error(\"Invalid point: Points need to have an y property.\");\n    }\n  }\n\n  assertStartPoint() {\n    const startPoint = this.points[0];\n\n    if (startPoint.x !== 0){\n        throw new Error(\"Invalid Start Point: The 'x' starting point needs to be 0.\");\n    }\n  }\n\n  assertEndPoint() {\n    const endPoint = this.points[this.point.index-1];\n\n    if (endPoint.x !== 1){\n        throw new Error(\"Invalid End Point: The 'x' starting point needs to be 1.\");\n    }\n  }\n\n  assertPercentage() {\n    if (this.percentage < 0 || this.percentage > 1) {\n      throw new Error(\n        \"Invalid Percentage: the percentage needs to be with in 0-1.\"\n      );\n    }\n  }\n}\n"],"file":"BezierCurve.js"}