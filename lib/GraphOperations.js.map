{"version":3,"sources":["../src/GraphOperations.js"],"names":["GraphOperations","add","bind","subtract","multiply","divide","nodes","canOperate","isNumberNode","leftNode","rightNode","resultNode","value","name","length"],"mappings":";;;;;;;;;;;;;IAAqBA,e;;;AACnB,6BAAc;AAAA;;AACZ,SAAKC,GAAL,GAAW,KAAKA,GAAL,CAASC,IAAT,CAAc,IAAd,CAAX;AACA,SAAKC,QAAL,GAAgB,KAAKA,QAAL,CAAcD,IAAd,CAAmB,IAAnB,CAAhB;AACA,SAAKE,QAAL,GAAgB,KAAKA,QAAL,CAAcF,IAAd,CAAmB,IAAnB,CAAhB;AACA,SAAKG,MAAL,GAAc,KAAKA,MAAL,CAAYH,IAAZ,CAAiB,IAAjB,CAAd;AACD;;;;wBAEGI,K,EAAO;AACT,UAAI,KAAKC,UAAL,CAAgBD,KAAhB,KAA0B,KAAKE,YAAL,CAAkBF,KAAlB,CAA9B,EAAwD;AACtD,YAAMG,QAAQ,GAAGH,KAAK,CAAC,CAAD,CAAtB;AACA,YAAMI,SAAS,GAAGJ,KAAK,CAAC,CAAD,CAAvB;AACA,YAAMK,UAAU,GAAGL,KAAK,CAAC,CAAD,CAAxB;AAEAK,QAAAA,UAAU,CAACC,KAAX,GAAmBH,QAAQ,CAACG,KAAT,GAAiBF,SAAS,CAACE,KAA9C;AACD;AACF;;;6BAEQN,K,EAAO;AACd,UAAI,KAAKC,UAAL,CAAgBD,KAAhB,KAA0B,KAAKE,YAAL,CAAkBF,KAAlB,CAA9B,EAAwD;AACtD,YAAMG,QAAQ,GAAGH,KAAK,CAAC,CAAD,CAAtB;AACA,YAAMI,SAAS,GAAGJ,KAAK,CAAC,CAAD,CAAvB;AACA,YAAMK,UAAU,GAAGL,KAAK,CAAC,CAAD,CAAxB;AAEAK,QAAAA,UAAU,CAACC,KAAX,GAAmBH,QAAQ,CAACG,KAAT,GAAiBF,SAAS,CAACE,KAA9C;AACD;AACF;;;6BAEQN,K,EAAO;AACd,UAAI,KAAKC,UAAL,CAAgBD,KAAhB,KAA0B,KAAKE,YAAL,CAAkBF,KAAlB,CAA9B,EAAwD;AACtD,YAAMG,QAAQ,GAAGH,KAAK,CAAC,CAAD,CAAtB;AACA,YAAMI,SAAS,GAAGJ,KAAK,CAAC,CAAD,CAAvB;AACA,YAAMK,UAAU,GAAGL,KAAK,CAAC,CAAD,CAAxB;AAEAK,QAAAA,UAAU,CAACC,KAAX,GAAmBH,QAAQ,CAACG,KAAT,GAAiBF,SAAS,CAACE,KAA9C;AACD;AACF;;;2BAEMN,K,EAAO;AACZ,UAAI,KAAKC,UAAL,CAAgBD,KAAhB,KAA0B,KAAKE,YAAL,CAAkBF,KAAlB,CAA9B,EAAwD;AACtD,YAAMG,QAAQ,GAAGH,KAAK,CAAC,CAAD,CAAtB;AACA,YAAMI,SAAS,GAAGJ,KAAK,CAAC,CAAD,CAAvB;AACA,YAAMK,UAAU,GAAGL,KAAK,CAAC,CAAD,CAAxB;AAEAK,QAAAA,UAAU,CAACC,KAAX,GAAmBH,QAAQ,CAACG,KAAT,GAAiBF,SAAS,CAACE,KAA9C;AACD;AACF;;;iCAEYN,K,EAAO;AAClB,aAAOA,KAAK,CAAC,CAAD,CAAL,CAASO,IAAT,KAAkB,QAAzB;AACD;;;+BAEUP,K,EAAO;AAChB,aAAOA,KAAK,CAACQ,MAAN,KAAiB,CAAxB;AACD","sourcesContent":["export default class GraphOperations {\n  constructor() {\n    this.add = this.add.bind(this);\n    this.subtract = this.subtract.bind(this);\n    this.multiply = this.multiply.bind(this);\n    this.divide = this.divide.bind(this);\n  }\n\n  add(nodes) {\n    if (this.canOperate(nodes) && this.isNumberNode(nodes)) {\n      const leftNode = nodes[0];\n      const rightNode = nodes[1];\n      const resultNode = nodes[2];\n\n      resultNode.value = leftNode.value + rightNode.value;\n    }\n  }\n\n  subtract(nodes) {\n    if (this.canOperate(nodes) && this.isNumberNode(nodes)) {\n      const leftNode = nodes[0];\n      const rightNode = nodes[1];\n      const resultNode = nodes[2];\n\n      resultNode.value = leftNode.value - rightNode.value;\n    }\n  }\n\n  multiply(nodes) {\n    if (this.canOperate(nodes) && this.isNumberNode(nodes)) {\n      const leftNode = nodes[0];\n      const rightNode = nodes[1];\n      const resultNode = nodes[2];\n\n      resultNode.value = leftNode.value * rightNode.value;\n    }\n  }\n\n  divide(nodes) {\n    if (this.canOperate(nodes) && this.isNumberNode(nodes)) {\n      const leftNode = nodes[0];\n      const rightNode = nodes[1];\n      const resultNode = nodes[2];\n\n      resultNode.value = leftNode.value / rightNode.value;\n    }\n  }\n\n  isNumberNode(nodes) {\n    return nodes[0].name === \"number\";\n  }\n\n  canOperate(nodes) {\n    return nodes.length === 3;\n  }\n}\n"],"file":"GraphOperations.js"}