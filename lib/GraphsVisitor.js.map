{"version":3,"sources":["../src/GraphsVisitor.js"],"names":["emptyFn","treeUtility","TreeUtility","GraphsVisitor","callback","setCallback","visitDown","bind","visitUp","graphs","optimized","Array","isArray","siblings","slice","node","areEqual","every","sibling","areTreeStructuresEqual","Error","walkUp","children","index","childGraphs","map","length","walkDown"],"mappings":"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","sourcesContent":["import TreeUtility from \"./TreeUtility.js\";\n\nconst emptyFn = () => {};\nconst treeUtility = new TreeUtility();\n\nexport default class GraphsVisitor {\n  constructor(callback) {\n    this.setCallback(callback);\n    this.visitDown = this.visitDown.bind(this);\n    this.visitUp = this.visitUp.bind(this);\n  }\n\n  visitUp(graphs, optimized = false) {\n    if (!Array.isArray(graphs)) {\n      return;\n    }\n\n    const siblings = graphs.slice(1);\n    const node = graphs[0];\n\n    if (!optimized) {\n      const areEqual = siblings.every((sibling) =>\n        treeUtility.areTreeStructuresEqual(node, sibling)\n      );\n\n      if (!areEqual) {\n        throw new Error(\"The nodes structures need to be the same.\");\n      }\n    }\n\n    this.walkUp(graphs);\n  }\n\n  walkUp(graphs) {\n    if (!Array.isArray(graphs)) {\n      return;\n    }\n\n    const node = graphs[0];\n\n    if (Array.isArray(node.children)) {\n      for (let index = 0; index < node.children.length; index++) {\n        const childGraphs = graphs.map((node) => {\n          return node.children[index];\n        });\n        this.walkUp(childGraphs);\n      }\n    }\n\n    this.callback(graphs);\n  }\n\n  visitDown(graphs, optimized = false) {\n    if (!Array.isArray(graphs)) {\n      return;\n    }\n\n    const siblings = graphs.slice(1);\n    const node = graphs[0];\n\n    if (!optimized) {\n      const areEqual = siblings.every((sibling) =>\n        treeUtility.areTreeStructuresEqual(node, sibling)\n      );\n\n      if (!areEqual) {\n        throw new Error(\"The nodes structures need to be the same.\");\n      }\n    }\n\n    this.walkDown(graphs);\n  }\n\n  walkDown(graphs) {\n    if (!Array.isArray(graphs)) {\n      return;\n    }\n\n    this.callback(graphs);\n\n    const node = graphs[0];\n    if (Array.isArray(node.children)) {\n      for (let index = 0; index < node.children.length; index++) {\n        const childGraphs = graphs.map((node) => {\n          return node.children[index];\n        });\n        this.walkDown(childGraphs);\n      }\n    }\n  }\n\n  setCallback(callback) {\n    if (typeof callback === \"function\") {\n      this.callback = callback;\n    } else {\n      this.callback = emptyFn;\n    }\n\n    this.callback = callback;\n  }\n}\n"],"file":"GraphsVisitor.js"}