{"version":3,"sources":["../src/BlendedEasing.js"],"names":["BlendedEasing","options","fromEasing","from","offset","toEasing","to","transitionSpan","validateOptions","slope","getSlope","continuedSlopeEasing","BezierCurve","easing","Easing","deltaX","rise","valueAt","run","percentage","fromPercentage","fromValue","adjustedPercentage","toValue","getFromValue","Error"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;;;IAEqBA,a;;;AACnB,yBAAYC,OAAZ,EAAqB;AAAA;;AACnBA,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACA,SAAKC,UAAL,GAAkBD,OAAO,CAACE,IAA1B;AACA,SAAKC,MAAL,GAAcH,OAAO,CAACG,MAAtB;AACA,SAAKC,QAAL,GAAgBJ,OAAO,CAACK,EAAxB;AACA,SAAKC,cAAL,GACE,OAAON,OAAO,CAACM,cAAf,KAAkC,QAAlC,GACIN,OAAO,CAACM,cADZ,GAEI,IAHN;AAKA,SAAKC,eAAL;AAEA,SAAKC,KAAL,GAAa,KAAKC,QAAL,EAAb;AACA,SAAKC,oBAAL,GAA4B,IAAIC,oBAAJ,CAAgB,CAAC,CAAD,EAAI,KAAKH,KAAT,CAAhB,CAA5B;AACA,SAAKI,MAAL,GAAc,IAAIC,eAAJ,CAAW,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,CAAX,CAAd;AACD,G,CAED;;;;;+BACW;AACT,UAAMC,MAAM,GAAG,IAAf;AAEA,UAAIC,IAAJ;;AAEA,UAAI,KAAKZ,MAAL,GAAc,CAAlB,EAAqB;AACnBY,QAAAA,IAAI,GACF,KAAKd,UAAL,CAAgBe,OAAhB,CAAwBF,MAAM,GAAG,KAAKX,MAAtC,IACA,KAAKF,UAAL,CAAgBe,OAAhB,CAAwB,KAAKb,MAA7B,CAFF;AAGD,OAJD,MAIO;AACLY,QAAAA,IAAI,GAAG,KAAKd,UAAL,CAAgBe,OAAhB,CAAwB,CAAxB,IAA6B,KAAKf,UAAL,CAAgBe,OAAhB,CAAwB,IAAIF,MAA5B,CAApC;AACD;;AAED,UAAMG,GAAG,GAAGH,MAAZ;AAEA,aAAOC,IAAI,GAAGE,GAAd;AACD;;;iCAEYC,U,EAAY;AACvB,UAAMC,cAAc,GAAG,KAAKhB,MAAL,GAAce,UAArC;AACA,UAAIE,SAAJ,CAFuB,CAIvB;;AACA,UAAID,cAAc,IAAI,CAAtB,EAAyB;AACvBC,QAAAA,SAAS,GACP,KAAKnB,UAAL,CAAgBe,OAAhB,CAAwBG,cAAxB,IACA,KAAKlB,UAAL,CAAgBe,OAAhB,CAAwB,KAAKb,MAA7B,CAFF;AAGD,OAJD,MAIO;AACLiB,QAAAA,SAAS,GACP,KAAKV,oBAAL,CAA0BM,OAA1B,CAAkCG,cAAc,GAAG,CAAnD,IACA,KAAKlB,UAAL,CAAgBe,OAAhB,CAAwB,CAAxB,CADA,GAEA,KAAKf,UAAL,CAAgBe,OAAhB,CAAwB,KAAKb,MAA7B,CAHF;AAID;;AAED,aAAOiB,SAAP;AACD;;;4BAEOF,U,EAAY;AAClB,UAAMG,kBAAkB,GAAG,KAAKT,MAAL,CAAYI,OAAZ,CAAoBE,UAAU,GAAG,KAAKZ,cAAtC,CAA3B;AACA,UAAMgB,OAAO,GAAG,KAAKlB,QAAL,CAAcY,OAAd,CAAsBE,UAAtB,CAAhB;AACA,UAAME,SAAS,GAAG,KAAKG,YAAL,CAAkBL,UAAlB,CAAlB;;AAEA,UAAIA,UAAU,GAAG,KAAKZ,cAAtB,EAAsC;AACpC,eAAOc,SAAS,GAAG,CAACE,OAAO,GAAGF,SAAX,IAAwBC,kBAA3C;AACD,OAFD,MAEO;AACL,eAAOC,OAAP;AACD;AACF;;;sCAEiB;AAChB,UACE,OAAO,KAAKrB,UAAL,CAAgBe,OAAvB,KAAmC,UAAnC,IACA,OAAO,KAAKZ,QAAL,CAAcY,OAArB,KAAiC,UAFnC,EAGE;AACA,cAAM,IAAIQ,KAAJ,CACJ,+DADI,CAAN;AAGD;AACF","sourcesContent":["import BezierCurve from \"./BezierCurve.js\";\nimport Easing from \"./Easing.js\";\n\nexport default class BlendedEasing {\n  constructor(options) {\n    options = options || {};\n    this.fromEasing = options.from;\n    this.offset = options.offset;\n    this.toEasing = options.to;\n    this.transitionSpan =\n      typeof options.transitionSpan === \"number\"\n        ? options.transitionSpan\n        : 0.25;\n\n    this.validateOptions();\n\n    this.slope = this.getSlope();\n    this.continuedSlopeEasing = new BezierCurve([0, this.slope]);\n    this.easing = new Easing([0, 0, 0, 1, 1, 1, 1, 1]);\n  }\n\n  // Use differential calculas to get slope.\n  getSlope() {\n    const deltaX = 0.01;\n\n    let rise;\n\n    if (this.offset < 1) {\n      rise =\n        this.fromEasing.valueAt(deltaX + this.offset) -\n        this.fromEasing.valueAt(this.offset);\n    } else {\n      rise = this.fromEasing.valueAt(1) - this.fromEasing.valueAt(1 - deltaX);\n    }\n\n    const run = deltaX;\n\n    return rise / run;\n  }\n\n  getFromValue(percentage) {\n    const fromPercentage = this.offset + percentage;\n    let fromValue;\n\n    // Get the value from the easing until it finishes then use the slope easing.\n    if (fromPercentage <= 1) {\n      fromValue =\n        this.fromEasing.valueAt(fromPercentage) -\n        this.fromEasing.valueAt(this.offset);\n    } else {\n      fromValue =\n        this.continuedSlopeEasing.valueAt(fromPercentage - 1) +\n        this.fromEasing.valueAt(1) -\n        this.fromEasing.valueAt(this.offset);\n    }\n\n    return fromValue;\n  }\n\n  valueAt(percentage) {\n    const adjustedPercentage = this.easing.valueAt(percentage / this.transitionSpan);\n    const toValue = this.toEasing.valueAt(percentage);\n    const fromValue = this.getFromValue(percentage);\n\n    if (percentage < this.transitionSpan) {\n      return fromValue + (toValue - fromValue) * adjustedPercentage;\n    } else {\n      return toValue;\n    }\n  }\n\n  validateOptions() {\n    if (\n      typeof this.fromEasing.valueAt !== \"function\" ||\n      typeof this.toEasing.valueAt !== \"function\"\n    ) {\n      throw new Error(\n        \"Both fromEasing and toEasing need to have a valueAt function.\"\n      );\n    }\n  }\n}\n"],"file":"BlendedEasing.js"}