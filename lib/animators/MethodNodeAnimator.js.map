{"version":3,"sources":["../../src/animators/MethodNodeAnimator.js"],"names":["findArguments","node","name","filterValues","findMethodName","findArgs","children","find","filter","MethodNodeAnimator","options","createArgs","createAnimators","methodName","getMethodName","controls","length","args","map","animators","_","index","arg","ValuesNodeAnimator","value","progress","getArgs","animator","render","join"],"mappings":";;;;;;;AAAA;;;;;;;;;;;;;;;;AAEA,IAAMA,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,IAAI;AAAA,SAAIA,IAAI,CAACC,IAAL,KAAc,WAAlB;AAAA,CAA1B;;AACA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAAAF,IAAI;AAAA,SAAIA,IAAI,CAACC,IAAL,KAAc,QAAlB;AAAA,CAAzB;;AACA,IAAME,cAAc,GAAG,SAAjBA,cAAiB,CAAAH,IAAI;AAAA,SAAIA,IAAI,CAACC,IAAL,KAAc,MAAlB;AAAA,CAA3B;;AACA,IAAMG,QAAQ,GAAG,SAAXA,QAAW,CAAAJ,IAAI,EAAI;AACvB,SAAOA,IAAI,CAACK,QAAL,CAAcC,IAAd,CAAmBP,aAAnB,EAAkCM,QAAlC,CAA2CE,MAA3C,CAAkDL,YAAlD,CAAP;AACD,CAFD;;IAIqBM,kB;;;AACnB,8BAAYC,OAAZ,EAAqB;AAAA;;AACnB,SAAKA,OAAL,GAAeA,OAAf;AACA,SAAKC,UAAL;AACA,SAAKC,eAAL;AACA,SAAKC,UAAL,GAAkB,KAAKC,aAAL,EAAlB,CAJmB,CAMnB;;AACA,SAAKJ,OAAL,CAAaK,QAAb,CAAsBC,MAAtB,GAA+B,CAA/B;AACD;;;;iCAEY;AACX,WAAKC,IAAL,GAAY,KAAKP,OAAL,CAAaK,QAAb,CAAsBG,GAAtB,CAA0Bb,QAA1B,CAAZ;AACD;;;sCAEiB;AAAA;;AAChB,WAAKc,SAAL,GAAiB,KAAKF,IAAL,CAAU,CAAV,EAAaC,GAAb,CAAiB,UAACE,CAAD,EAAIC,KAAJ,EAAc;AAC9C,YAAMN,QAAQ,GAAG,KAAI,CAACE,IAAL,CAAUC,GAAV,CAAc,UAAAI,GAAG,EAAI;AACpC,iBAAOA,GAAG,CAACD,KAAD,CAAV;AACD,SAFgB,CAAjB;;AAIA,eAAO,IAAIE,2BAAJ,mBACF,KAAI,CAACb,OADH;AAELK,UAAAA,QAAQ,EAAEA;AAFL,WAAP;AAID,OATgB,CAAjB;AAUD;;;oCAEe;AACd,aAAO,KAAKL,OAAL,CAAaK,QAAb,CAAsB,CAAtB,EAAyBT,QAAzB,CAAkCC,IAAlC,CAAuCH,cAAvC,EAAuDoB,KAA9D;AACD;;;2BAEMC,Q,EAAU;AACf,UAAMZ,UAAU,GAAG,KAAKA,UAAxB;AACA,UAAMI,IAAI,GAAG,KAAKS,OAAL,CAAaD,QAAb,CAAb;AAEA,uBAAUZ,UAAV,cAAwBI,IAAxB;AACD;;;4BAEOQ,Q,EAAU;AAChB,aAAO,KAAKN,SAAL,CAAeD,GAAf,CAAmB,UAAAS,QAAQ;AAAA,eAAIA,QAAQ,CAACC,MAAT,CAAgBH,QAAhB,CAAJ;AAAA,OAA3B,EAA0DI,IAA1D,CAA+D,IAA/D,CAAP;AACD","sourcesContent":["import ValuesNodeAnimator from \"./ValuesNodeAnimator.js\";\n\nconst findArguments = node => node.name === \"arguments\";\nconst filterValues = node => node.name === \"values\";\nconst findMethodName = node => node.name === \"name\";\nconst findArgs = node => {\n  return node.children.find(findArguments).children.filter(filterValues);\n};\n\nexport default class MethodNodeAnimator {\n  constructor(options) {\n    this.options = options;\n    this.createArgs();\n    this.createAnimators();\n    this.methodName = this.getMethodName();\n\n    // The nodes become quite the memory hogs, so we need to remove references.\n    this.options.controls.length = 0;\n  }\n\n  createArgs() {\n    this.args = this.options.controls.map(findArgs);\n  }\n\n  createAnimators() {\n    this.animators = this.args[0].map((_, index) => {\n      const controls = this.args.map(arg => {\n        return arg[index];\n      });\n\n      return new ValuesNodeAnimator({\n        ...this.options,\n        controls: controls\n      });\n    });\n  }\n\n  getMethodName() {\n    return this.options.controls[0].children.find(findMethodName).value;\n  }\n\n  render(progress) {\n    const methodName = this.methodName;\n    const args = this.getArgs(progress);\n\n    return `${methodName}(${args})`;\n  }\n\n  getArgs(progress) {\n    return this.animators.map(animator => animator.render(progress)).join(\", \");\n  }\n}\n"],"file":"MethodNodeAnimator.js"}