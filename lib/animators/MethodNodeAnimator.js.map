{"version":3,"sources":["../../src/animators/MethodNodeAnimator.js"],"names":["MethodNodeAnimator","options","createArgs","createAnimators","methodName","getMethodName","controls","length","args","map","node","children","find","name","filter","animators","_","index","arg","ValuesNodeAnimator","value","progress","getArgs","animator","render","join"],"mappings":";;;;;;;AAAA;;;;;;;;;;;;;;;;IAEqBA,kB;;;AACnB,8BAAYC,OAAZ,EAAqB;AAAA;;AACnB,SAAKA,OAAL,GAAeA,OAAf;AACA,SAAKC,UAAL;AACA,SAAKC,eAAL;AACA,SAAKC,UAAL,GAAkB,KAAKC,aAAL,EAAlB,CAJmB,CAMnB;;AACA,SAAKJ,OAAL,CAAaK,QAAb,CAAsBC,MAAtB,GAA+B,CAA/B;AACD;;;;iCAEY;AACX,WAAKC,IAAL,GAAY,KAAKP,OAAL,CAAaK,QAAb,CAAsBG,GAAtB,CAA0B,UAAAC,IAAI,EAAI;AAC5C,eAAOA,IAAI,CAACC,QAAL,CACJC,IADI,CACC,UAAAF,IAAI;AAAA,iBAAIA,IAAI,CAACG,IAAL,KAAc,WAAlB;AAAA,SADL,EAEJF,QAFI,CAEKG,MAFL,CAEY,UAAAJ,IAAI;AAAA,iBAAIA,IAAI,CAACG,IAAL,KAAc,QAAlB;AAAA,SAFhB,CAAP;AAGD,OAJW,CAAZ;AAKD;;;sCAEiB;AAAA;;AAChB,WAAKE,SAAL,GAAiB,KAAKP,IAAL,CAAU,CAAV,EAAaC,GAAb,CAAiB,UAACO,CAAD,EAAIC,KAAJ,EAAc;AAC9C,YAAMX,QAAQ,GAAG,KAAI,CAACE,IAAL,CAAUC,GAAV,CAAc,UAAAS,GAAG,EAAI;AACpC,iBAAOA,GAAG,CAACD,KAAD,CAAV;AACD,SAFgB,CAAjB;;AAIA,eAAO,IAAIE,2BAAJ,mBACF,KAAI,CAAClB,OADH;AAELK,UAAAA,QAAQ,EAAEA;AAFL,WAAP;AAID,OATgB,CAAjB;AAUD;;;oCAEe;AACd,aAAO,KAAKL,OAAL,CAAaK,QAAb,CAAsB,CAAtB,EAAyBK,QAAzB,CAAkCC,IAAlC,CAAuC,UAAAF,IAAI;AAAA,eAAIA,IAAI,CAACG,IAAL,KAAc,MAAlB;AAAA,OAA3C,EACJO,KADH;AAED;;;2BAEMC,Q,EAAU;AACf,UAAMjB,UAAU,GAAG,KAAKA,UAAxB;AACA,UAAMI,IAAI,GAAG,KAAKc,OAAL,CAAaD,QAAb,CAAb;AAEA,uBAAUjB,UAAV,cAAwBI,IAAxB;AACD;;;4BAEOa,Q,EAAU;AAChB,aAAO,KAAKN,SAAL,CAAeN,GAAf,CAAmB,UAAAc,QAAQ;AAAA,eAAIA,QAAQ,CAACC,MAAT,CAAgBH,QAAhB,CAAJ;AAAA,OAA3B,EAA0DI,IAA1D,CAA+D,IAA/D,CAAP;AACD","sourcesContent":["import ValuesNodeAnimator from \"./ValuesNodeAnimator.js\";\n\nexport default class MethodNodeAnimator {\n  constructor(options) {\n    this.options = options;\n    this.createArgs();\n    this.createAnimators();\n    this.methodName = this.getMethodName();\n\n    // The nodes become quite the memory hogs, so we need to remove references.\n    this.options.controls.length = 0;\n  }\n\n  createArgs() {\n    this.args = this.options.controls.map(node => {\n      return node.children\n        .find(node => node.name === \"arguments\")\n        .children.filter(node => node.name === \"values\");\n    });\n  }\n\n  createAnimators() {\n    this.animators = this.args[0].map((_, index) => {\n      const controls = this.args.map(arg => {\n        return arg[index];\n      });\n\n      return new ValuesNodeAnimator({\n        ...this.options,\n        controls: controls\n      });\n    });\n  }\n\n  getMethodName() {\n    return this.options.controls[0].children.find(node => node.name === \"name\")\n      .value;\n  }\n\n  render(progress) {\n    const methodName = this.methodName;\n    const args = this.getArgs(progress);\n\n    return `${methodName}(${args})`;\n  }\n\n  getArgs(progress) {\n    return this.animators.map(animator => animator.render(progress)).join(\", \");\n  }\n}\n"],"file":"MethodNodeAnimator.js"}