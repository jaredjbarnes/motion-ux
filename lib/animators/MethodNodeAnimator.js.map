{"version":3,"sources":["../../src/animators/MethodNodeAnimator.js"],"names":["MethodNodeAnimator","options","createArgs","createAnimators","fromArgs","fromNode","children","find","node","name","filter","toArgs","toNode","animators","map","index","ValuesNodeAnimator","progress","methodName","getMethodName","args","getArgs","animator","render","join","value"],"mappings":";;;;;;;AAAA;;;;;;;;;;;;;;;;IAEqBA,kB;;;AACnB,8BAAYC,OAAZ,EAAqB;AAAA;;AACnB,SAAKA,OAAL,GAAeA,OAAf;AACA,SAAKC,UAAL;AACA,SAAKC,eAAL;AACD;;;;iCAEY;AACX,WAAKC,QAAL,GAAgB,KAAKH,OAAL,CAAaI,QAAb,CAAsBC,QAAtB,CACbC,IADa,CACR,UAAAC,IAAI;AAAA,eAAIA,IAAI,CAACC,IAAL,KAAc,WAAlB;AAAA,OADI,EAEbH,QAFa,CAEJI,MAFI,CAEG,UAAAF,IAAI;AAAA,eAAIA,IAAI,CAACC,IAAL,KAAc,QAAlB;AAAA,OAFP,CAAhB;AAIA,WAAKE,MAAL,GAAc,KAAKV,OAAL,CAAaW,MAAb,CAAoBN,QAApB,CACXC,IADW,CACN,UAAAC,IAAI;AAAA,eAAIA,IAAI,CAACC,IAAL,KAAc,WAAlB;AAAA,OADE,EAEXH,QAFW,CAEFI,MAFE,CAEK,UAAAF,IAAI;AAAA,eAAIA,IAAI,CAACC,IAAL,KAAc,QAAlB;AAAA,OAFT,CAAd;AAGD;;;sCAEiB;AAAA;;AAChB,WAAKI,SAAL,GAAiB,KAAKT,QAAL,CAAcU,GAAd,CAAkB,UAACN,IAAD,EAAOO,KAAP,EAAiB;AAClD,eAAO,IAAIC,2BAAJ,mBACF,KAAI,CAACf,OADH;AAELI,UAAAA,QAAQ,EAAEG,IAFL;AAGLI,UAAAA,MAAM,EAAE,KAAI,CAACD,MAAL,CAAYI,KAAZ;AAHH,WAAP;AAKD,OANgB,CAAjB;AAOD;;;2BAEME,Q,EAAU;AACf,UAAMC,UAAU,GAAG,KAAKC,aAAL,EAAnB;AACA,UAAMC,IAAI,GAAG,KAAKC,OAAL,CAAaJ,QAAb,CAAb;AAEA,uBAAUC,UAAV,cAAwBE,IAAxB;AACD;;;4BAEOH,Q,EAAU;AAChB,aAAO,KAAKJ,SAAL,CAAeC,GAAf,CAAmB,UAAAQ,QAAQ;AAAA,eAAIA,QAAQ,CAACC,MAAT,CAAgBN,QAAhB,CAAJ;AAAA,OAA3B,EAA0DO,IAA1D,CAA+D,IAA/D,CAAP;AACD;;;oCAEe;AACd,aAAO,KAAKvB,OAAL,CAAaI,QAAb,CAAsBC,QAAtB,CAA+BC,IAA/B,CAAoC,UAAAC,IAAI;AAAA,eAAIA,IAAI,CAACC,IAAL,KAAc,MAAlB;AAAA,OAAxC,EACJgB,KADH;AAED","sourcesContent":["import ValuesNodeAnimator from \"./ValuesNodeAnimator.js\";\n\nexport default class MethodNodeAnimator {\n  constructor(options) {\n    this.options = options;\n    this.createArgs();\n    this.createAnimators();\n  }\n\n  createArgs() {\n    this.fromArgs = this.options.fromNode.children\n      .find(node => node.name === \"arguments\")\n      .children.filter(node => node.name === \"values\");\n\n    this.toArgs = this.options.toNode.children\n      .find(node => node.name === \"arguments\")\n      .children.filter(node => node.name === \"values\");\n  }\n\n  createAnimators() {\n    this.animators = this.fromArgs.map((node, index) => {\n      return new ValuesNodeAnimator({\n        ...this.options,\n        fromNode: node,\n        toNode: this.toArgs[index]\n      });\n    });\n  }\n\n  render(progress) {\n    const methodName = this.getMethodName();\n    const args = this.getArgs(progress);\n\n    return `${methodName}(${args})`;\n  }\n\n  getArgs(progress) {\n    return this.animators.map(animator => animator.render(progress)).join(\", \");\n  }\n\n  getMethodName() {\n    return this.options.fromNode.children.find(node => node.name === \"name\")\n      .value;\n  }\n}\n"],"file":"MethodNodeAnimator.js"}