{"version":3,"sources":["../../src/animators/HexNodeAnimator.js"],"names":["hexRegEx","HexNodeAnimator","options","progress","duration","parseValues","createAnimators","values","controls","map","node","hexToRgb","convertToFullHex","value","reduce","acc","rgb","reds","push","greens","blues","length","substring","hex","lastIndex","result","exec","parseInt","number","toString","redAnimator","NumberAnimator","greenAnimator","blueAnimator","red","numberToHex","Math","round","render","green","blue"],"mappings":"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","sourcesContent":["import NumberAnimator from \"./NumberAnimator.js\";\n\nconst hexRegEx = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})|([a-f\\d]{1})([a-f\\d]{1})([a-f\\d]{1})$/i;\n\nexport default class HexNodeAnimator {\n  constructor(options) {\n    this.options = options;\n    this.progress = null;\n    this.duration = null;\n\n    this.parseValues();\n    this.createAnimators();\n  }\n\n  parseValues() {\n    const values = this.options.controls.map(node => {\n      return this.hexToRgb(this.convertToFullHex(node.value));\n    });\n\n    const { reds, greens, blues } = values.reduce(\n      (acc, rgb) => {\n        acc.reds.push(rgb[0]);\n        acc.greens.push(rgb[1]);\n        acc.blues.push(rgb[2]);\n        return acc;\n      },\n      {\n        reds: [],\n        greens: [],\n        blues: []\n      }\n    );\n\n    this.reds = reds;\n    this.greens = greens;\n    this.blues = blues;\n  }\n\n  convertToFullHex(value) {\n    if (value.length === 4) {\n      value = value + value.substring(1);\n    }\n    return value;\n  }\n\n  hexToRgb(hex) {\n    hexRegEx.lastIndex = 0;\n    const result = hexRegEx.exec(hex);\n    return result\n      ? [\n          parseInt(result[1], 16),\n          parseInt(result[2], 16),\n          parseInt(result[3], 16)\n        ]\n      : null;\n  }\n\n  numberToHex(number) {\n    if (number > 255) {\n      number = 255;\n    }\n\n    if (number < 0) {\n      number = 0;\n    }\n\n    let hex = number.toString(16);\n    if (hex.length < 2) {\n      hex = \"0\" + hex;\n    }\n\n    return hex;\n  }\n\n  createAnimators() {\n    this.redAnimator = new NumberAnimator({\n      ...this.options,\n      controls: this.reds\n    });\n\n    this.greenAnimator = new NumberAnimator({\n      ...this.options,\n      controls: this.greens\n    });\n\n    this.blueAnimator = new NumberAnimator({\n      ...this.options,\n      controls: this.blues\n    });\n  }\n\n  render(progress) {\n    const red = this.numberToHex(Math.round(this.redAnimator.render(progress)));\n\n    const green = this.numberToHex(\n      Math.round(this.greenAnimator.render(progress))\n    );\n\n    const blue = this.numberToHex(\n      Math.round(this.blueAnimator.render(progress))\n    );\n\n    return `#${red}${green}${blue}`;\n  }\n}\n"],"file":"HexNodeAnimator.js"}