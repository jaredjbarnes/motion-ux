{"version":3,"sources":["../../src/animators/HexNodeAnimator.js"],"names":["hexRegEx","HexNodeAnimator","options","progress","values","duration","fromValue","toValue","change","parsefromValue","parsetoValue","createAnimators","fromNode","value","length","substring","hexToRgb","toNode","animators","map","index","NumberAnimator","from","to","startAt","endAt","easing","hex","lastIndex","result","exec","parseInt","red","Math","round","render","green","blue"],"mappings":";;;;;;;AAAA;;;;;;;;;;AAEA,IAAMA,QAAQ,GAAG,gFAAjB;;IAEqBC,e;;;AACnB,2BAAYC,OAAZ,EAAqB;AAAA;;AACnB,SAAKA,OAAL,GAAeA,OAAf;AACA,SAAKC,QAAL,GAAgB,IAAhB;AACA,SAAKC,MAAL,GAAc,IAAd;AACA,SAAKC,QAAL,GAAgB,IAAhB;AACA,SAAKC,SAAL,GAAiB,IAAjB;AACA,SAAKC,OAAL,GAAe,IAAf;AACA,SAAKC,MAAL,GAAc,IAAd;AAEA,SAAKC,cAAL;AACA,SAAKC,YAAL;AACA,SAAKC,eAAL;AACD;;;;qCAEgB;AACf,UAAIL,SAAS,GAAG,KAAKJ,OAAL,CAAaU,QAAb,CAAsBC,KAAtC;;AACA,UAAIP,SAAS,CAACQ,MAAV,KAAqB,CAAzB,EAA4B;AAC1BR,QAAAA,SAAS,GAAGA,SAAS,GAAGA,SAAS,CAACS,SAAV,CAAoB,CAApB,CAAxB;AACD;;AACD,WAAKT,SAAL,GAAiB,KAAKU,QAAL,CAAcV,SAAd,CAAjB;AACD;;;mCAEc;AACb,UAAIC,OAAO,GAAG,KAAKL,OAAL,CAAae,MAAb,CAAoBJ,KAAlC;;AACA,UAAIN,OAAO,CAACO,MAAR,KAAmB,CAAvB,EAA0B;AACxBP,QAAAA,OAAO,GAAGA,OAAO,GAAGA,OAAO,CAACQ,SAAR,CAAkB,CAAlB,CAApB;AACD;;AACD,WAAKR,OAAL,GAAe,KAAKS,QAAL,CAAcT,OAAd,CAAf;AACD;;;sCAEiB;AAAA;;AAChB,WAAKW,SAAL,GAAiB,KAAKZ,SAAL,CAAea,GAAf,CAAmB,UAACN,KAAD,EAAQO,KAAR,EAAkB;AACpD,eAAO,IAAIC,uBAAJ,CAAmB;AACxBC,UAAAA,IAAI,EAAET,KADkB;AAExBU,UAAAA,EAAE,EAAE,KAAI,CAAChB,OAAL,CAAaa,KAAb,CAFoB;AAGxBI,UAAAA,OAAO,EAAE,KAAI,CAACtB,OAAL,CAAasB,OAHE;AAIxBC,UAAAA,KAAK,EAAE,KAAI,CAACvB,OAAL,CAAauB,KAJI;AAKxBC,UAAAA,MAAM,EAAE,KAAI,CAACxB,OAAL,CAAawB;AALG,SAAnB,CAAP;AAOD,OARgB,CAAjB;AASD;;;6BAEQC,G,EAAK;AACZ3B,MAAAA,QAAQ,CAAC4B,SAAT,GAAqB,CAArB;AACA,UAAMC,MAAM,GAAG7B,QAAQ,CAAC8B,IAAT,CAAcH,GAAd,CAAf;AACA,aAAOE,MAAM,GACT,CACEE,QAAQ,CAACF,MAAM,CAAC,CAAD,CAAP,EAAY,EAAZ,CADV,EAEEE,QAAQ,CAACF,MAAM,CAAC,CAAD,CAAP,EAAY,EAAZ,CAFV,EAGEE,QAAQ,CAACF,MAAM,CAAC,CAAD,CAAP,EAAY,EAAZ,CAHV,CADS,GAMT,IANJ;AAOD;;;2BAEM1B,Q,EAAU;AACf,UAAM6B,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAW,KAAKhB,SAAL,CAAe,CAAf,EAAkBiB,MAAlB,CAAyBhC,QAAzB,CAAX,CAAZ;AACA,UAAMiC,KAAK,GAAGH,IAAI,CAACC,KAAL,CAAW,KAAKhB,SAAL,CAAe,CAAf,EAAkBiB,MAAlB,CAAyBhC,QAAzB,CAAX,CAAd;AACA,UAAMkC,IAAI,GAAGJ,IAAI,CAACC,KAAL,CAAW,KAAKhB,SAAL,CAAe,CAAf,EAAkBiB,MAAlB,CAAyBhC,QAAzB,CAAX,CAAb;AAEA,4BAAe6B,GAAf,cAAsBI,KAAtB,cAA+BC,IAA/B;AACD","sourcesContent":["import NumberAnimator from \"./NumberAnimator.js\";\n\nconst hexRegEx = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})|([a-f\\d]{1})([a-f\\d]{1})([a-f\\d]{1})$/i;\n\nexport default class HexNodeAnimator {\n  constructor(options) {\n    this.options = options;\n    this.progress = null;\n    this.values = null;\n    this.duration = null;\n    this.fromValue = null;\n    this.toValue = null;\n    this.change = null;\n\n    this.parsefromValue();\n    this.parsetoValue();\n    this.createAnimators();\n  }\n\n  parsefromValue() {\n    let fromValue = this.options.fromNode.value;\n    if (fromValue.length === 4) {\n      fromValue = fromValue + fromValue.substring(1);\n    }\n    this.fromValue = this.hexToRgb(fromValue);\n  }\n\n  parsetoValue() {\n    let toValue = this.options.toNode.value;\n    if (toValue.length === 4) {\n      toValue = toValue + toValue.substring(1);\n    }\n    this.toValue = this.hexToRgb(toValue);\n  }\n\n  createAnimators() {\n    this.animators = this.fromValue.map((value, index) => {\n      return new NumberAnimator({\n        from: value,\n        to: this.toValue[index],\n        startAt: this.options.startAt,\n        endAt: this.options.endAt,\n        easing: this.options.easing\n      });\n    });\n  }\n\n  hexToRgb(hex) {\n    hexRegEx.lastIndex = 0;\n    const result = hexRegEx.exec(hex);\n    return result\n      ? [\n          parseInt(result[1], 16),\n          parseInt(result[2], 16),\n          parseInt(result[3], 16)\n        ]\n      : null;\n  }\n\n  render(progress) {\n    const red = Math.round(this.animators[0].render(progress));\n    const green = Math.round(this.animators[1].render(progress));\n    const blue = Math.round(this.animators[2].render(progress));\n\n    return `rgba(${red},${green},${blue}, 1)`;\n  }\n}\n"],"file":"HexNodeAnimator.js"}