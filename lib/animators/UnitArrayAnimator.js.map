{"version":3,"sources":["../../src/animators/UnitArrayAnimator.js"],"names":["UnitArrayAnimator","options","target","progress","value","duration","fromArray","toArray","animationOptions","unitAnimators","parseFromArrays","parseToArrays","assertArraysAreEqualLength","createUnitAnimators","name","toString","from","trim","split","to","length","Error","map","index","UnitAnimator","AnimationOptions","startAt","endAt","animator","render","join","every","unit","unitRegEx","lastIndex","test"],"mappings":"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","sourcesContent":["import AnimationOptions from \"../AnimationOptions.js\";\nimport UnitAnimator from \"./UnitAnimator.js\";\nimport unitRegEx from \"./unitRegEx.js\";\n\nexport default class UnitArrayAnimator {\n  constructor(options) {\n    this.target = options.target;\n    this.options = options;\n    this.progress = null;\n    this.value = null;\n    this.duration = null;\n    this.fromArray = null;\n    this.toArray = null;\n    this.animationOptions = null;\n    this.unitAnimators = null;\n\n    this.parseFromArrays();\n    this.parseToArrays();\n    this.assertArraysAreEqualLength();\n    this.createUnitAnimators();\n  }\n\n  render(progress, duration) {\n    this.progress = progress;\n    this.duration = duration;\n\n    this.target[this.options.name] = this.toString();\n  }\n\n  parseFromArrays() {\n    if (this.fromArray == null) {\n      this.fromArray = this.options.from.trim().split(\" \");\n    }\n  }\n\n  parseToArrays() {\n    if (this.toArray == null) {\n      this.toArray = this.options.to.trim().split(\" \");\n    }\n  }\n\n  assertArraysAreEqualLength() {\n    if (this.toArray.length !== this.fromArray.length) {\n      throw new Error(\n        `The unit arrays with in \"${this.options.name}\" aren't equal length.`\n      );\n    }\n  }\n\n  createUnitAnimators() {\n    if (this.unitAnimators == null) {\n      this.unitAnimators = this.fromArray.map((from, index) => {\n        return new UnitAnimator(\n          new AnimationOptions({\n            target: {},\n            name: this.options.name,\n            from: from,\n            to: this.toArray[index],\n            startAt: this.options.startAt,\n            endAt: this.options.endAt\n          })\n        );\n      });\n    }\n  }\n\n  toString() {\n    const value = this.unitAnimators\n      .map(animator => {\n        animator.render(this.progress, this.duration);\n        return animator.target[animator.options.name];\n      })\n      .join(\" \");\n\n    return value;\n  }\n\n  static isMatch({ from, to }) {\n    return (\n      typeof from === \"string\" &&\n      typeof to === \"string\" &&\n      from\n        .trim()\n        .split(\" \")\n        .every(unit => {\n          unitRegEx.lastIndex = 0;\n          unitRegEx.test(unit);\n        }) &&\n      to\n        .trim()\n        .split(\" \")\n        .every(unit => {\n          unitRegEx.lastIndex = 0;\n          unitRegEx.test(unit);\n        })\n    );\n  }\n}\n"],"file":"UnitArrayAnimator.js"}