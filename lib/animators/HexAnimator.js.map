{"version":3,"sources":["../../src/animators/HexAnimator.js"],"names":["hexRegEx","HexAnimator","options","target","progress","values","duration","fromValue","toValue","change","parsefromValue","parsetoValue","calculateChange","rgbRegex","lastIndex","hexToRgb","from","to","changes","red","green","blue","hex","result","exec","parseInt","startAt","name","endAt","calculateProgress","toHex","progressWithEasing","easing","Math","max","min","test"],"mappings":"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","sourcesContent":["import rgbRegex from \"./rgbRegEx.js\";\n\nconst hexRegEx = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i;\n\nexport default class HexAnimator {\n  constructor(options) {\n    this.target = options.target;\n    this.options = options;\n    this.progress = null;\n    this.values = null;\n    this.duration = null;\n    this.fromValue = null;\n    this.toValue = null;\n    this.change = null;\n\n    this.parsefromValue();\n    this.parsetoValue();\n    this.calculateChange();\n  }\n\n  parsefromValue() {\n    if (this.fromValue == null) {\n      rgbRegex.lastIndex = 0;\n      this.fromValue = this.hexToRgb(this.options.from);\n    }\n  }\n\n  parsetoValue() {\n    if (this.toValue == null) {\n      rgbRegex.lastIndex = 0;\n      this.toValue = this.hexToRgb(this.options.to);\n    }\n  }\n\n  calculateChange() {\n    if (this.changes == null) {\n      const red = this.toValue[0] - this.fromValue[0];\n      const green = this.toValue[1] - this.fromValue[1];\n      const blue = this.toValue[2] - this.fromValue[2];\n\n      this.change = [red, green, blue];\n    }\n  }\n\n  hexToRgb(hex) {\n    hexRegEx.lastIndex = 0;\n    const result = hexRegEx.exec(hex);\n    return result\n      ? [\n          parseInt(result[1], 16),\n          parseInt(result[2], 16),\n          parseInt(result[3], 16)\n        ]\n      : null;\n  }\n\n  render(progress, duration) {\n    this.progress = progress;\n    this.duration = duration;\n\n    if (progress <= this.options.startAt) {\n      this.target[this.options.name] = this.options.from;\n      return;\n    }\n\n    if (progress >= this.options.endAt) {\n      this.target[this.options.name] = this.options.to;\n      return;\n    }\n\n    this.calculateProgress();\n\n    this.target[this.options.name] = this.toHex();\n  }\n\n  calculateProgress() {\n    const progress = this.progress - this.options.startAt;\n    const duration = this.options.endAt - this.options.startAt;\n    const progressWithEasing = this.options.easing(progress, 0, 1, duration);\n\n    let red = this.fromValue[0] + this.change[0] * progressWithEasing;\n    let green = this.fromValue[1] + this.change[1] * progressWithEasing;\n    let blue = this.fromValue[2] + this.change[2] * progressWithEasing;\n\n    red = Math.max(0, red);\n    red = Math.min(255, red);\n\n    green = Math.max(0, green);\n    green = Math.min(255, green);\n\n    blue = Math.max(0, blue);\n    blue = Math.min(255, blue);\n\n    this.values = [red, green, blue];\n  }\n\n  toHex() {\n    const values = this.values;\n\n    return `rgba(${values[0]},${values[1]},${values[2]})`;\n  }\n\n  static isMatch(options) {\n    hexRegEx.lastIndex = 0;\n    return hexRegEx.test(options.from) && hexRegEx.test(options.to);\n  }\n}\n"],"file":"HexAnimator.js"}