{"version":3,"sources":["../../src/animators/RgbaAnimator.js"],"names":["rgbaRegex","RgbaAnimator","options","target","progress","values","duration","fromValue","toValue","change","parsefromValue","parsetoValue","calculateChange","startAt","name","from","endAt","to","calculateProgress","toRgba","lastIndex","exec","slice","map","value","Number","valueOf","red","green","blue","alpha","progressWithEasing","easing","Math","max","min","test"],"mappings":"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","sourcesContent":["const rgbaRegex = /^rgba\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*(\\d+(?:\\.\\d+)?))?\\)$/;\n\nexport default class RgbaAnimator {\n  constructor(options) {\n    this.target = options.target;\n    this.options = options;\n    this.progress = null;\n    this.values = null;\n    this.duration = null;\n    this.fromValue = null;\n    this.toValue = null;\n    this.change = null;\n\n    this.parsefromValue();\n    this.parsetoValue();\n    this.calculateChange();\n  }\n\n  render(progress, duration) {\n    this.progress = progress;\n    this.duration = duration;\n\n    if (progress <= this.options.startAt) {\n      this.target[this.options.name] = this.options.from;\n      return;\n    }\n\n    if (progress >= this.options.endAt) {\n      this.target[this.options.name] = this.options.to;\n      return;\n    }\n\n    this.calculateProgress();\n    this.target[this.options.name] = this.toRgba();\n  }\n\n  parsefromValue() {\n    if (this.fromValue == null) {\n      rgbaRegex.lastIndex = 0;\n      this.fromValue = rgbaRegex\n        .exec(this.options.from)\n        .slice(1)\n        .map(value => new Number(value).valueOf());\n    }\n  }\n\n  parsetoValue() {\n    if (this.toValue == null) {\n      rgbaRegex.lastIndex = 0;\n      this.toValue = rgbaRegex\n        .exec(this.options.to)\n        .slice(1)\n        .map(value => new Number(value).valueOf());\n    }\n  }\n\n  calculateChange() {\n    if (this.change == null) {\n      const red = this.toValue[0] - this.fromValue[0];\n      const green = this.toValue[1] - this.fromValue[1];\n      const blue = this.toValue[2] - this.fromValue[2];\n      const alpha = this.toValue[3] - this.fromValue[3];\n\n      this.change = [red, green, blue, alpha];\n    }\n  }\n\n  calculateProgress() {\n    const progress = this.progress - this.options.startAt;\n    const duration = this.options.endAt - this.options.startAt;\n    const progressWithEasing = this.options.easing(progress, 0, 1, duration);\n\n    let red = this.fromValue[0] + this.change[0] * progressWithEasing;\n    let green = this.fromValue[1] + this.change[1] * progressWithEasing;\n    let blue = this.fromValue[2] + this.change[2] * progressWithEasing;\n    let alpha = this.fromValue[3] + this.change[3] * progressWithEasing;\n\n    red = Math.max(0, red);\n    red = Math.min(255, red);\n\n    green = Math.max(0, green);\n    green = Math.min(255, green);\n\n    blue = Math.max(0, blue);\n    blue = Math.min(255, blue);\n\n    alpha = Math.max(0, alpha);\n    alpha = Math.min(1, alpha);\n\n    this.values = [red, green, blue, alpha];\n  }\n\n  toRgba() {\n    const [red, green, blue, alpha] = this.values;\n    return `rgba(${red}, ${green}, ${blue}, ${alpha})`;\n  }\n\n  static isMatch(options) {\n    rgbaRegex.lastIndex = 0;\n    return rgbaRegex.test(options.from) && rgbaRegex.test(options.to);\n  }\n}\n"],"file":"RgbaAnimator.js"}