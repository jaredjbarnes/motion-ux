{"version":3,"sources":["../src/TreeUtility.js"],"names":["visitor","Visitor","convertNumberNode","node","name","value","Number","hash","str","seed","h1","h2","i","ch","length","charCodeAt","Math","imul","TreeUtility","nodeA","nodeB","nodeASequence","sequence","nodeBSequence","setCallback","push","visitDown","join"],"mappings":";;;;;;;AAAA;;;;;;;;;;AAEA,IAAMA,OAAO,GAAG,IAAIC,gBAAJ,EAAhB;;AAEA,SAASC,iBAAT,CAA2BC,IAA3B,EAAiC;AAC/B,MAAIA,IAAI,CAACC,IAAL,KAAc,QAAlB,EAA4B;AAC1BD,IAAAA,IAAI,CAACE,KAAL,GAAaC,MAAM,CAACH,IAAI,CAACE,KAAN,CAAnB;AACD;AACF,C,CAED;AACA;;;AACA,SAASE,IAAT,CAAcC,GAAd,EAA6B;AAAA,MAAVC,IAAU,uEAAH,CAAG;AAC3B,MAAIC,EAAE,GAAG,aAAaD,IAAtB;AAAA,MACEE,EAAE,GAAG,aAAaF,IADpB;;AAEA,OAAK,IAAIG,CAAC,GAAG,CAAR,EAAWC,EAAhB,EAAoBD,CAAC,GAAGJ,GAAG,CAACM,MAA5B,EAAoCF,CAAC,EAArC,EAAyC;AACvCC,IAAAA,EAAE,GAAGL,GAAG,CAACO,UAAJ,CAAeH,CAAf,CAAL;AACAF,IAAAA,EAAE,GAAGM,IAAI,CAACC,IAAL,CAAUP,EAAE,GAAGG,EAAf,EAAmB,UAAnB,CAAL;AACAF,IAAAA,EAAE,GAAGK,IAAI,CAACC,IAAL,CAAUN,EAAE,GAAGE,EAAf,EAAmB,UAAnB,CAAL;AACD;;AACDH,EAAAA,EAAE,GACAM,IAAI,CAACC,IAAL,CAAUP,EAAE,GAAIA,EAAE,KAAK,EAAvB,EAA4B,UAA5B,IACAM,IAAI,CAACC,IAAL,CAAUN,EAAE,GAAIA,EAAE,KAAK,EAAvB,EAA4B,UAA5B,CAFF;AAGAA,EAAAA,EAAE,GACAK,IAAI,CAACC,IAAL,CAAUN,EAAE,GAAIA,EAAE,KAAK,EAAvB,EAA4B,UAA5B,IACAK,IAAI,CAACC,IAAL,CAAUP,EAAE,GAAIA,EAAE,KAAK,EAAvB,EAA4B,UAA5B,CAFF;AAGA,SAAO,cAAc,UAAUC,EAAxB,KAA+BD,EAAE,KAAK,CAAtC,CAAP;AACD;;IAEoBQ,W;;;;;;;;;2CACIC,K,EAAOC,K,EAAO;AACnC,UAAMC,aAAa,GAAG,KAAKC,QAAL,CAAcH,KAAd,CAAtB;AACA,UAAMI,aAAa,GAAG,KAAKD,QAAL,CAAcF,KAAd,CAAtB;AACA,aAAOC,aAAa,KAAKE,aAAzB;AACD;;;6BAEQpB,I,EAAM;AACb,UAAMmB,QAAQ,GAAG,EAAjB;AACAtB,MAAAA,OAAO,CAACwB,WAAR,CAAoB,UAACrB,IAAD,EAAU;AAC5BmB,QAAAA,QAAQ,CAACG,IAAT,CAActB,IAAI,CAACC,IAAnB;AACD,OAFD;AAGAJ,MAAAA,OAAO,CAAC0B,SAAR,CAAkBvB,IAAlB;AAEA,aAAOmB,QAAQ,CAACK,IAAT,CAAc,GAAd,CAAP;AACD;;;iCAEYxB,I,EAAM;AACjB,aAAOI,IAAI,CAAC,KAAKe,QAAL,CAAcnB,IAAd,CAAD,CAAX;AACD;;;qDAEgCA,I,EAAM;AACrCH,MAAAA,OAAO,CAACwB,WAAR,CAAoBtB,iBAApB;AACAF,MAAAA,OAAO,CAAC0B,SAAR,CAAkBvB,IAAlB;AACD","sourcesContent":["import Visitor from \"./Visitor.js\";\n\nconst visitor = new Visitor();\n\nfunction convertNumberNode(node) {\n  if (node.name === \"number\") {\n    node.value = Number(node.value);\n  }\n}\n\n// Hashing function, this may not be the best. So this may need to be replaced.\n// https://stackoverflow.com/questions/7616461/generate-a-hash-from-string-in-javascript\nfunction hash(str, seed = 0) {\n  let h1 = 0xdeadbeef ^ seed,\n    h2 = 0x41c6ce57 ^ seed;\n  for (let i = 0, ch; i < str.length; i++) {\n    ch = str.charCodeAt(i);\n    h1 = Math.imul(h1 ^ ch, 2654435761);\n    h2 = Math.imul(h2 ^ ch, 1597334677);\n  }\n  h1 =\n    Math.imul(h1 ^ (h1 >>> 16), 2246822507) ^\n    Math.imul(h2 ^ (h2 >>> 13), 3266489909);\n  h2 =\n    Math.imul(h2 ^ (h2 >>> 16), 2246822507) ^\n    Math.imul(h1 ^ (h1 >>> 13), 3266489909);\n  return 4294967296 * (2097151 & h2) + (h1 >>> 0);\n}\n\nexport default class TreeUtility {\n  areTreeStructuresEqual(nodeA, nodeB) {\n    const nodeASequence = this.sequence(nodeA);\n    const nodeBSequence = this.sequence(nodeB);\n    return nodeASequence === nodeBSequence;\n  }\n\n  sequence(node) {\n    const sequence = [];\n    visitor.setCallback((node) => {\n      sequence.push(node.name);\n    });\n    visitor.visitDown(node);\n\n    return sequence.join(\"|\");\n  }\n\n  sequenceHash(node) {\n    return hash(this.sequence(node));\n  }\n\n  convertNumberNodesToNumberValues(node) {\n    visitor.setCallback(convertNumberNode);\n    visitor.visitDown(node);\n  }\n}\n"],"file":"TreeUtility.js"}