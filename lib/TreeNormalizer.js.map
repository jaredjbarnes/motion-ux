{"version":3,"sources":["../src/TreeNormalizer.js"],"names":["filterOutSpaces","child","name","TreeNormalizer","visitNode","bind","visitor","Visitor","node","Array","isArray","children","removeOptionalSpaces","replaceHex","removeUnnecessaryDividers","removeUnnecessarySpaces","removeSpacesAroundDividers","value","trim","length","pop","filter","map","hexColor","HexColor","toComplexNode","visitDown"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;;;AAEA,IAAMA,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD;AAAA,SAAWA,KAAK,CAACC,IAAN,KAAe,iBAA1B;AAAA,CAAxB;;IAEqBC,c;;;AACnB,4BAAc;AAAA;;AACZ,SAAKC,SAAL,GAAiB,KAAKA,SAAL,CAAeC,IAAf,CAAoB,IAApB,CAAjB;AACA,SAAKC,OAAL,GAAe,IAAIC,gBAAJ,CAAY,KAAKH,SAAjB,CAAf;AACD;;;;8BAESI,I,EAAM;AACd,UAAIC,KAAK,CAACC,OAAN,CAAcF,IAAI,CAACG,QAAnB,CAAJ,EAAkC;AAChC,aAAKC,oBAAL,CAA0BJ,IAA1B;AACA,aAAKK,UAAL,CAAgBL,IAAhB;AACA,aAAKM,yBAAL,CAA+BN,IAA/B;AACA,aAAKO,uBAAL,CAA6BP,IAA7B;AACD;;AAED,WAAKQ,0BAAL,CAAgCR,IAAhC;AACD;;;+CAE0BA,I,EAAM;AAC/B,UAAIA,IAAI,CAACN,IAAL,KAAc,SAAlB,EAA4B;AAC1BM,QAAAA,IAAI,CAACS,KAAL,GAAaT,IAAI,CAACS,KAAL,CAAWC,IAAX,KAAoB,GAAjC;AACD;AACF;;;8CAEyBV,I,EAAM;AAC9B,UAAMG,QAAQ,GAAGH,IAAI,CAACG,QAAtB;;AAEA,aACEA,QAAQ,CAACQ,MAAT,GAAkB,CAAlB,IACAR,QAAQ,CAACA,QAAQ,CAACQ,MAAT,GAAkB,CAAnB,CAAR,CAA8BjB,IAA9B,KAAuC,SAFzC,EAGE;AACAS,QAAAA,QAAQ,CAACS,GAAT;AACD;AACF;;;4CAEuBZ,I,EAAM;AAC5B,UAAMG,QAAQ,GAAGH,IAAI,CAACG,QAAtB;;AAEA,aACEH,IAAI,CAACN,IAAL,KAAc,QAAd,IACAS,QAAQ,CAACQ,MAAT,GAAkB,CADlB,IAEAR,QAAQ,CAACA,QAAQ,CAACQ,MAAT,GAAkB,CAAnB,CAAR,CAA8BjB,IAA9B,KAAuC,QAHzC,EAIE;AACAS,QAAAA,QAAQ,CAACS,GAAT;AACD;AACF;;;yCAEoBZ,I,EAAM;AACzBA,MAAAA,IAAI,CAACG,QAAL,GAAgBH,IAAI,CAACG,QAAL,CAAcU,MAAd,CAAqBrB,eAArB,CAAhB;AACD;;;+BAEUQ,I,EAAM;AACfA,MAAAA,IAAI,CAACG,QAAL,GAAgBH,IAAI,CAACG,QAAL,CAAcW,GAAd,CAAkB,UAACrB,KAAD,EAAW;AAC3C,YAAIA,KAAK,CAACC,IAAN,KAAe,KAAnB,EAA0B;AACxB,cAAMqB,QAAQ,GAAG,IAAIC,iBAAJ,CAAavB,KAAK,CAACgB,KAAnB,CAAjB;AACA,iBAAOM,QAAQ,CAACE,aAAT,EAAP;AACD;;AACD,eAAOxB,KAAP;AACD,OANe,CAAhB;AAOD;;;8BAESO,I,EAAM;AACd,WAAKF,OAAL,CAAaoB,SAAb,CAAuBlB,IAAvB;AACA,aAAOA,IAAP;AACD","sourcesContent":["import Visitor from \"./Visitor.js\";\nimport HexColor from \"./HexColor.js\";\n\nconst filterOutSpaces = (child) => child.name !== \"optional-spaces\";\n\nexport default class TreeNormalizer {\n  constructor() {\n    this.visitNode = this.visitNode.bind(this);\n    this.visitor = new Visitor(this.visitNode);\n  }\n\n  visitNode(node) {\n    if (Array.isArray(node.children)) {\n      this.removeOptionalSpaces(node);\n      this.replaceHex(node);\n      this.removeUnnecessaryDividers(node);\n      this.removeUnnecessarySpaces(node);\n    }\n\n    this.removeSpacesAroundDividers(node);\n  }\n\n  removeSpacesAroundDividers(node) {\n    if (node.name === \"divider\"){\n      node.value = node.value.trim() + \" \";\n    }\n  }\n\n  removeUnnecessaryDividers(node) {\n    const children = node.children;\n\n    while (\n      children.length > 0 &&\n      children[children.length - 1].name === \"divider\"\n    ) {\n      children.pop();\n    }\n  }\n\n  removeUnnecessarySpaces(node) {\n    const children = node.children;\n\n    while (\n      node.name === \"values\" &&\n      children.length > 0 &&\n      children[children.length - 1].name === \"spaces\"\n    ) {\n      children.pop();\n    }\n  }\n\n  removeOptionalSpaces(node) {\n    node.children = node.children.filter(filterOutSpaces);\n  }\n\n  replaceHex(node) {\n    node.children = node.children.map((child) => {\n      if (child.name === \"hex\") {\n        const hexColor = new HexColor(child.value);\n        return hexColor.toComplexNode();\n      }\n      return child;\n    });\n  }\n\n  normalize(node) {\n    this.visitor.visitDown(node);\n    return node;\n  }\n}\n"],"file":"TreeNormalizer.js"}