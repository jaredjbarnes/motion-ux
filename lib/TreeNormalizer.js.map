{"version":3,"sources":["../src/TreeNormalizer.js"],"names":["filterOutSpaces","child","name","TreeNormalizer","visitNode","bind","visitor","Visitor","node","Array","isArray","children","removeOptionalSpaces","replaceHex","removeUnnecessaryDividers","length","type","pop","filter","map","hexColor","HexColor","value","toComplexNode","visitDown"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;;;AAEA,IAAMA,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD;AAAA,SAAWA,KAAK,CAACC,IAAN,KAAe,iBAA1B;AAAA,CAAxB;;IAEqBC,c;;;AACnB,4BAAc;AAAA;;AACZ,SAAKC,SAAL,GAAiB,KAAKA,SAAL,CAAeC,IAAf,CAAoB,IAApB,CAAjB;AACA,SAAKC,OAAL,GAAe,IAAIC,gBAAJ,CAAY,KAAKH,SAAjB,CAAf;AACD;;;;8BAESI,I,EAAM;AACd,UAAIC,KAAK,CAACC,OAAN,CAAcF,IAAI,CAACG,QAAnB,CAAJ,EAAkC;AAChC,aAAKC,oBAAL,CAA0BJ,IAA1B;AACA,aAAKK,UAAL,CAAgBL,IAAhB;AACA,aAAKM,yBAAL,CAA+BN,IAA/B;AACD;AAEF;;;8CAEyBA,I,EAAM;AAC9B,UAAMG,QAAQ,GAAGH,IAAI,CAACG,QAAtB;;AAEA,aACEA,QAAQ,CAACI,MAAT,GAAkB,CAAlB,IACAJ,QAAQ,CAACA,QAAQ,CAACI,MAAT,GAAkB,CAAnB,CAAR,CAA8BC,IAA9B,KAAuC,SAFzC,EAGE;AACAL,QAAAA,QAAQ,CAACM,GAAT;AACD;AACF;;;yCAEoBT,I,EAAM;AACzBA,MAAAA,IAAI,CAACG,QAAL,GAAgBH,IAAI,CAACG,QAAL,CAAcO,MAAd,CAAqBlB,eAArB,CAAhB;AACD;;;+BAEUQ,I,EAAM;AACfA,MAAAA,IAAI,CAACG,QAAL,GAAgBH,IAAI,CAACG,QAAL,CAAcQ,GAAd,CAAkB,UAAClB,KAAD,EAAW;AAC3C,YAAIA,KAAK,CAACC,IAAN,KAAe,KAAnB,EAA0B;AACxB,cAAMkB,QAAQ,GAAG,IAAIC,iBAAJ,CAAapB,KAAK,CAACqB,KAAnB,CAAjB;AACA,iBAAOF,QAAQ,CAACG,aAAT,EAAP;AACD;;AACD,eAAOtB,KAAP;AACD,OANe,CAAhB;AAOD;;;8BAESO,I,EAAM;AACd,WAAKF,OAAL,CAAakB,SAAb,CAAuBhB,IAAvB;AACA,aAAOA,IAAP;AACD","sourcesContent":["import Visitor from \"./Visitor.js\";\nimport HexColor from \"./HexColor.js\";\n\nconst filterOutSpaces = (child) => child.name !== \"optional-spaces\";\n\nexport default class TreeNormalizer {\n  constructor() {\n    this.visitNode = this.visitNode.bind(this);\n    this.visitor = new Visitor(this.visitNode);\n  }\n\n  visitNode(node) {\n    if (Array.isArray(node.children)) {\n      this.removeOptionalSpaces(node);\n      this.replaceHex(node);\n      this.removeUnnecessaryDividers(node);\n    }\n\n  }\n\n  removeUnnecessaryDividers(node) {\n    const children = node.children;\n\n    while (\n      children.length > 0 &&\n      children[children.length - 1].type === \"divider\"\n    ) {\n      children.pop();\n    }\n  }\n\n  removeOptionalSpaces(node) {\n    node.children = node.children.filter(filterOutSpaces);\n  }\n\n  replaceHex(node) {\n    node.children = node.children.map((child) => {\n      if (child.name === \"hex\") {\n        const hexColor = new HexColor(child.value);\n        return hexColor.toComplexNode();\n      }\n      return child;\n    });\n  }\n\n  normalize(node) {\n    this.visitor.visitDown(node);\n    return node;\n  }\n}\n"],"file":"TreeNormalizer.js"}