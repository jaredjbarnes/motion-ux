{"version":3,"sources":["../src/Timeline.js"],"names":["defaultClock","DefaultClock","Timeline","Scrubber","repeatDirections","animations","duration","clock","render","bind","scrubber","animators","AnimatorCreator","getAnimators","play","reverse","stop","progress","seek","values","getValuesAt","results","filter","animator","animation","options","name","property","from","startAt","forEach","min","Math","max","endAt","dispose","observeTime","apply","arguments","observe","value","timeScale","repeat","repeatDirection"],"mappings":"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","sourcesContent":["import DefaultClock from \"./DefaultClock.js\";\nimport Scrubber from \"./Scrubber.js\";\nimport AnimatorCreator from \"./AnimatorCreator.js\";\n\nconst defaultClock = new DefaultClock();\n\nexport default class Timeline {\n  static get repeatDirections() {\n    return Scrubber.repeatDirections;\n  }\n\n  constructor({ animations, duration, clock = defaultClock }) {\n    this.clock = clock;\n    this.render = this.render.bind(this);\n    this.scrubber = new Scrubber({\n      clock,\n      duration,\n      render: this.render\n    });\n    this.duration = duration;\n    this.animators = new AnimatorCreator(animations).getAnimators();\n  }\n\n  get duration() {\n    return this.scrubber.duration;\n  }\n\n  set duration(value) {\n    this.scrubber.duration = value;\n  }\n\n  get timeScale() {\n    return this.scrubber.timeScale;\n  }\n\n  set timeScale(value) {\n    this.scrubber.timeScale = value;\n  }\n\n  get repeat() {\n    return this.scrubber.repeat;\n  }\n\n  set repeat(value) {\n    this.scrubber.repeat = value;\n  }\n\n  get repeatDirection() {\n    return this.scrubber.repeatDirection;\n  }\n\n  set repeatDirection(value) {\n    this.scrubber.repeatDirection = value;\n  }\n\n  get progress() {\n    return this.scrubber.progress;\n  }\n\n  play() {\n    this.scrubber.play();\n  }\n\n  reverse() {\n    this.scrubber.reverse();\n  }\n\n  stop() {\n    this.scrubber.stop();\n  }\n\n  seek(progress) {\n    this.scrubber.seek(progress);\n  }\n\n  render() {\n    const progress = this.progress;\n    const values = this.getValuesAt(progress);\n    return values;\n  }\n\n  getCurrentValues() {\n    return this.getValuesAt(this.progress);\n  }\n\n  getValuesAt(progress) {\n    const results = {};\n\n    this.animators\n      .filter(animator => {\n        let animation = results[animator.options.name];\n\n        if (animation == null) {\n          animation = results[animator.options.name] = {};\n        }\n\n        if (animation[animator.options.property] == null) {\n          animation[animator.options.property] = animator.options.from;\n        }\n\n        return animator.options.startAt <= progress;\n      })\n      .forEach(animator => {\n        const animation = results[animator.options.name];\n        animation[animator.options.property] = animator.render(\n          progress,\n          this.duration\n        );\n      });\n\n    this.animators\n      .filter(animator => {\n        const min = Math.max(animator.options.startAt, progress);\n        const max = Math.min(animator.options.endAt, progress);\n\n        return min <= max;\n      })\n      .forEach(animator => {\n        const animation = results[animator.options.name];\n        animation[animator.options.property] = animator.render(\n          progress,\n          this.duration\n        );\n      });\n\n    return results;\n  }\n\n  dispose() {\n    this.scrubber.dispose();\n  }\n\n  observeTime() {\n    return this.scrubber.observeTime.apply(this.scrubber, arguments);\n  }\n\n  observe() {\n    return this.scrubber.observe.apply(this.scrubber, arguments);\n  }\n}\n"],"file":"Timeline.js"}