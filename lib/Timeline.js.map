{"version":3,"sources":["../src/Timeline.js"],"names":["defaultClock","DefaultClock","Timeline","Scrubber","repeatDirections","animations","duration","clock","animationOptions","render","bind","scrubber","_assertAnimations","_convertAnimations","_createAnimators","Array","isArray","Error","map","animation","AnimationOptions","sort","a","b","startAt","animators","options","Animator","name","play","reverse","stop","progress","seek","filter","animator","forEach","min","Math","max","endAt","observeTime","apply","arguments","observe","value","timeScale","repeat","repeatDirection"],"mappings":"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","sourcesContent":["import DefaultClock from \"./DefaultClock.js\";\nimport AnimationOptions from \"./AnimationOptions.js\";\nimport Scrubber from \"./Scrubber.js\";\nimport getAnimator from \"./animators/getAnimator.js\";\n\nconst defaultClock = new DefaultClock();\n\nexport default class Timeline {\n  static get repeatDirections() {\n    return Scrubber.repeatDirections;\n  }\n\n  constructor({ animations, duration, clock = defaultClock }) {\n    this.clock = clock;\n    this.animations = animations;\n    this.animationOptions = [];\n    this.render = this.render.bind(this);\n    this.scrubber = new Scrubber({\n      clock,\n      duration,\n      render: this.render\n    });\n    this.duration = duration;\n\n    this._assertAnimations();\n    this._convertAnimations();\n    this._createAnimators();\n  }\n\n  _assertAnimations() {\n    if (!Array.isArray(this.animations)) {\n      throw new Error(\"Expected animations to be an array.\");\n    }\n  }\n\n  _convertAnimations() {\n    this.animationOptions = this.animations.map(\n      animation => new AnimationOptions(animation)\n    );\n  }\n\n  _createAnimators() {\n    this.animationOptions.sort((a, b) => {\n      return a.startAt - b.startAt;\n    });\n\n    this.animators = this.animationOptions.map(options => {\n      const Animator = getAnimator(options);\n\n      if (Animator == null) {\n        throw new Error(\n          `Cannot find animator for name, \"${options.name}\".`\n        );\n      }\n\n      return new Animator(options);\n    });\n  }\n\n  get duration() {\n    return this.scrubber.duration;\n  }\n\n  set duration(value) {\n    this.scrubber.duration = value;\n  }\n\n  get timeScale() {\n    return this.scrubber.timeScale;\n  }\n\n  set timeScale(value) {\n    this.scrubber.timeScale = value;\n  }\n\n  get repeat() {\n    return this.scrubber.repeat;\n  }\n\n  set repeat(value) {\n    this.scrubber.repeat = value;\n  }\n\n  get repeatDirection() {\n    return this.scrubber.repeatDirection;\n  }\n\n  set repeatDirection(value) {\n    this.scrubber.repeatDirection = value;\n  }\n\n  play() {\n    this.scrubber.play();\n  }\n\n  reverse() {\n    this.scrubber.reverse();\n  }\n\n  stop() {\n    this.scrubber.stop();\n  }\n\n  seek(progress) {\n    this.scrubber.seek(progress);\n  }\n\n  render() {\n    const progress = this.scrubber.progress;\n\n    this.animators\n      .filter(animator => {\n        return animator.options.startAt <= progress;\n      })\n      .forEach(animator =>\n        animator.render(this.scrubber.progress, this.duration)\n      );\n\n    this.animators\n      .filter(animator => {\n        const min = Math.max(animator.options.startAt, progress);\n        const max = Math.min(animator.options.endAt, progress);\n\n        return min <= max;\n      })\n      .forEach(animator =>\n        animator.render(this.scrubber.progress, this.duration)\n      );\n  }\n\n  observeTime() {\n    this.scrubber.observeTime.apply(this.scrubber, arguments);\n  }\n\n  observe() {\n    this.scrubber.observe.apply(this.scrubber, arguments);\n  }\n}\n"],"file":"Timeline.js"}