{"version":3,"sources":["../src/Timeline.js"],"names":["defaultClock","DefaultClock","Timeline","Scrubber","repeatDirections","animations","duration","clock","adjustmentAnimators","render","bind","scrubber","animators","AnimatorCreator","getAnimators","play","reverse","stop","progress","seek","values","getValuesAt","Array","from","keys","forEach","target","changes","get","Object","key","results","Map","filter","animator","options","startAt","has","set","name","min","Math","max","endAt","observeTime","apply","arguments","observe","value","timeScale","repeat","repeatDirection"],"mappings":"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","sourcesContent":["import DefaultClock from \"./DefaultClock.js\";\nimport TimelineOption from \"./TimelineOption.js\";\nimport Scrubber from \"./Scrubber.js\";\nimport AnimatorCreator from \"./AnimatorCreator.js\";\n\nconst defaultClock = new DefaultClock();\n\nexport default class Timeline {\n  static get repeatDirections() {\n    return Scrubber.repeatDirections;\n  }\n\n  constructor({ animations, duration, clock = defaultClock }) {\n    this.clock = clock;\n    this.adjustmentAnimators = [];\n    this.render = this.render.bind(this);\n    this.scrubber = new Scrubber({\n      clock,\n      duration,\n      render: this.render\n    });\n    this.duration = duration;\n    this.animators = new AnimatorCreator(animations).getAnimators();\n  }\n\n  get duration() {\n    return this.scrubber.duration;\n  }\n\n  set duration(value) {\n    this.scrubber.duration = value;\n  }\n\n  get timeScale() {\n    return this.scrubber.timeScale;\n  }\n\n  set timeScale(value) {\n    this.scrubber.timeScale = value;\n  }\n\n  get repeat() {\n    return this.scrubber.repeat;\n  }\n\n  set repeat(value) {\n    this.scrubber.repeat = value;\n  }\n\n  get repeatDirection() {\n    return this.scrubber.repeatDirection;\n  }\n\n  set repeatDirection(value) {\n    this.scrubber.repeatDirection = value;\n  }\n\n  get progress() {\n    return this.scrubber.progress;\n  }\n\n  play() {\n    this.scrubber.play();\n  }\n\n  reverse() {\n    this.scrubber.reverse();\n  }\n\n  stop() {\n    this.scrubber.stop();\n  }\n\n  seek(progress) {\n    this.scrubber.seek(progress);\n  }\n\n  render() {\n    const progress = this.progress;\n\n    const values = this.getValuesAt(progress);\n\n    Array.from(values.keys()).forEach(target => {\n      const changes = values.get(target);\n\n      Object.keys(changes).forEach(key => {\n        target[key] = changes[key];\n      });\n    });\n  }\n\n  getCurrentValues() {\n    return this.getValuesAt(this.progress);\n  }\n\n  getValuesAt(progress) {\n    const results = new Map();\n\n    this.animators\n      .filter(animator => {\n        return animator.options.startAt <= progress;\n      })\n      .forEach(animator => {\n        if (!results.has(animator.options.target)) {\n          results.set(animator.options.target, {});\n        }\n\n        const changes = results.get(animator.options.target);\n        changes[animator.options.name] = animator.render(\n          progress,\n          this.duration\n        );\n      });\n\n    this.animators\n      .filter(animator => {\n        const min = Math.max(animator.options.startAt, progress);\n        const max = Math.min(animator.options.endAt, progress);\n\n        return min <= max;\n      })\n      .forEach(animator => {\n        if (!results.has(animator.options.target)) {\n          results.set(animator.options.target, {});\n        }\n\n        const changes = results.get(animator.options.target);\n        changes[animator.options.name] = animator.render(\n          progress,\n          this.duration\n        );\n      });\n\n    return results;\n  }\n\n  observeTime() {\n    this.scrubber.observeTime.apply(this.scrubber, arguments);\n  }\n\n  observe() {\n    this.scrubber.observe.apply(this.scrubber, arguments);\n  }\n}\n"],"file":"Timeline.js"}