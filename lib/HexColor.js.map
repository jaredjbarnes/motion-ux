{"version":3,"sources":["../src/HexColor.js"],"names":["hexRegEx","HexColor","hexString","setHex","normalizeHex","saveRgb","lastIndex","result","exec","hex","rgb","parseInt","children","map","number","ValueNode","toString","node","CompositeNode","length","substring","rgbArray","red","numberToHex","green","blue"],"mappings":";;;;;;;AAAA;;AAEA;;;;;;;;;;AAEA,IAAMA,QAAQ,GAAG,gFAAjB;;IAEqBC,Q;;;AACnB,oBAAYC,SAAZ,EAAuB;AAAA;;AACrB,SAAKC,MAAL,CAAYD,SAAZ;AACD;;;;2BAEMA,S,EAAW;AAChB,WAAKA,SAAL,GAAiBA,SAAjB;AACA,WAAKE,YAAL;AACA,WAAKC,OAAL;AACD;;;8BAES;AACR,sBAAM,KAAKH,SAAX;AAAA;AAAA;AACAF,MAAAA,QAAQ,CAACM,SAAT,GAAqB,CAArB;AACA,UAAMC,MAAM,GAAGP,QAAQ,CAACQ,IAAT,CAAcC,YAAd,CAAf;AACA,WAAKC,GAAL,GAAWH,MAAM,GACb,CACEI,QAAQ,CAACJ,MAAM,CAAC,CAAD,CAAP,EAAY,EAAZ,CADV,EAEEI,QAAQ,CAACJ,MAAM,CAAC,CAAD,CAAP,EAAY,EAAZ,CAFV,EAGEI,QAAQ,CAACJ,MAAM,CAAC,CAAD,CAAP,EAAY,EAAZ,CAHV,CADa,GAMb,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CANJ;AAOD;;;oCAEe;AACd,UAAMK,QAAQ,GAAG,KAAKF,GAAL,CAASG,GAAT,CAAa,UAACC,MAAD,EAAY;AACxC,YAAIC,+BAAJ,CAAc,QAAd,EAAwBD,MAAM,CAACE,QAAP,EAAxB;AACD,OAFgB,CAAjB;AAIA,UAAMC,IAAI,GAAG,IAAIC,mCAAJ,CAAkB,KAAlB,CAAb;AACAD,MAAAA,IAAI,CAACL,QAAL,GAAgBA,QAAhB;AACD;;;kCAEa;AACZ,aAAO,IAAIG,+BAAJ,CAAc,KAAd,EAAqB,KAAKb,SAA1B,CAAP;AACD;;;kCAEa;AACZ,2BAAc,KAAKQ,GAAL,CAAS,CAAT,CAAd,cAA6B,KAAKA,GAAL,CAAS,CAAT,CAA7B,cAA4C,KAAKA,GAAL,CAAS,CAAT,CAA5C;AACD;;;mCAEc;AACb,UAAI,KAAKR,SAAL,CAAeiB,MAAf,KAA0B,CAA9B,EAAiC;AAC/B,aAAKjB,SAAL,GAAiB,KAAKA,SAAL,GAAiB,KAAKA,SAAL,CAAekB,SAAf,CAAyB,CAAzB,CAAlC;AACD;AACF;;;gCAEWN,M,EAAQ;AAClB,UAAIA,MAAM,GAAG,GAAb,EAAkB;AAChBA,QAAAA,MAAM,GAAG,GAAT;AACD;;AAED,UAAIA,MAAM,GAAG,CAAb,EAAgB;AACdA,QAAAA,MAAM,GAAG,CAAT;AACD;;AAED,UAAIL,GAAG,GAAGK,MAAM,CAACE,QAAP,CAAgB,EAAhB,CAAV;;AACA,UAAIP,GAAG,CAACU,MAAJ,GAAa,CAAjB,EAAoB;AAClBV,QAAAA,GAAG,GAAG,MAAMA,GAAZ;AACD;;AAED,aAAOA,GAAP;AACD;;;kCAEa;AACZ,UAAMY,QAAQ,GAAG,KAAKX,GAAtB;AACA,UAAMY,GAAG,GAAG,KAAKC,WAAL,CAAiBF,QAAQ,CAAC,CAAD,CAAzB,CAAZ;AACA,UAAMG,KAAK,GAAG,KAAKD,WAAL,CAAiBF,QAAQ,CAAC,CAAD,CAAzB,CAAd;AACA,UAAMI,IAAI,GAAG,KAAKF,WAAL,CAAiBF,QAAQ,CAAC,CAAD,CAAzB,CAAb;AAEA,wBAAWC,GAAX,SAAiBE,KAAjB,SAAyBC,IAAzB;AACD","sourcesContent":["import { ValueNode } from \"clarity-pattern-parser\";\nimport { CompositeNode } from \"clarity-pattern-parser\";\nimport hex from \"./patterns/hex\";\n\nconst hexRegEx = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})|([a-f\\d]{1})([a-f\\d]{1})([a-f\\d]{1})$/i;\n\nexport default class HexColor {\n  constructor(hexString) {\n    this.setHex(hexString);\n  }\n\n  setHex(hexString) {\n    this.hexString = hexString;\n    this.normalizeHex();\n    this.saveRgb();\n  }\n\n  saveRgb() {\n    hex = this.hexString;\n    hexRegEx.lastIndex = 0;\n    const result = hexRegEx.exec(hex);\n    this.rgb = result\n      ? [\n          parseInt(result[1], 16),\n          parseInt(result[2], 16),\n          parseInt(result[3], 16),\n        ]\n      : [0, 0, 0];\n  }\n\n  toComplexNode() {\n    const children = this.rgb.map((number) => {\n      new ValueNode(\"number\", number.toString());\n    });\n\n    const node = new CompositeNode(\"hex\");\n    node.children = children;\n  }\n\n  toValueNode() {\n    return new ValueNode(\"hex\", this.hexString);\n  }\n\n  toRgbString() {\n    return `rgb(${this.rgb[0]},${this.rgb[1]},${this.rgb[2]})`;\n  }\n\n  normalizeHex() {\n    if (this.hexString.length === 4) {\n      this.hexString = this.hexString + this.hexString.substring(1);\n    }\n  }\n\n  numberToHex(number) {\n    if (number > 255) {\n      number = 255;\n    }\n\n    if (number < 0) {\n      number = 0;\n    }\n\n    let hex = number.toString(16);\n    if (hex.length < 2) {\n      hex = \"0\" + hex;\n    }\n\n    return hex;\n  }\n\n  toHexString() {\n    const rgbArray = this.rgb;\n    const red = this.numberToHex(rgbArray[0]);\n    const green = this.numberToHex(rgbArray[1]);\n    const blue = this.numberToHex(rgbArray[2]);\n\n    return `#${red}${green}${blue}`;\n  }\n}\n"],"file":"HexColor.js"}