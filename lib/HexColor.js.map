{"version":3,"sources":["../src/HexColor.js"],"names":["hexRegEx","HexColor","hexString","setHex","normalizeHex","saveRgba","hex","lastIndex","result","exec","rgba","parseInt","children","map","number","valuesNode","CompositeNode","push","ValueNode","toString","reduce","acc","valueNode","node","name","openParen","args","closeParen","length","substring","rgbArray","red","numberToHex","green","blue"],"mappings":"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","sourcesContent":["import { ValueNode } from \"clarity-pattern-parser\";\nimport { CompositeNode } from \"clarity-pattern-parser\";\n\nconst hexRegEx = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})|([a-f\\d]{1})([a-f\\d]{1})([a-f\\d]{1})$/i;\n\nexport default class HexColor {\n  constructor(hexString) {\n    this.setHex(hexString);\n  }\n\n  setHex(hexString) {\n    this.hexString = hexString;\n    this.normalizeHex();\n    this.saveRgba();\n  }\n\n  saveRgba() {\n    const hex = this.hexString;\n    hexRegEx.lastIndex = 0;\n    const result = hexRegEx.exec(hex);\n    this.rgba = result\n      ? [\n          parseInt(result[1], 16),\n          parseInt(result[2], 16),\n          parseInt(result[3], 16),\n          1,\n        ]\n      : [0, 0, 0, 1];\n  }\n\n  toComplexNode() {\n    const children = this.rgba\n      .map((number) => {\n        const valuesNode = new CompositeNode(\"repeat-composite\", \"values\");\n        valuesNode.children.push(\n          new ValueNode(\"regex-value\", \"number\", number.toString())\n        );\n\n        return valuesNode;\n      })\n      .reduce((acc, valueNode) => {\n        acc.push(valueNode);\n        acc.push(new ValueNode(\"regex-value\", \"divider\", \", \"));\n        return acc;\n      }, []);\n\n    const node = new CompositeNode(\"and-composite\", \"method\");\n    const name = new ValueNode(\"regex-value\", \"name\", \"rgba\");\n    const openParen = new ValueNode(\"literal\", \"open-paren\", \"(\");\n    const args = new CompositeNode(\"repeat-composite\", \"arguments\");\n    const closeParen = new ValueNode(\"literal\", \"close-paren\", \")\");\n\n    args.children = children;\n\n    node.children.push(name, openParen, args, closeParen);\n\n    return node;\n  }\n\n  toValueNode() {\n    return new ValueNode(\"hex\", this.hexString);\n  }\n\n  toRgbString() {\n    return `rgb(${this.rgba[0]},${this.rgba[1]},${this.rgba[2]})`;\n  }\n\n  normalizeHex() {\n    if (this.hexString.length === 4) {\n      this.hexString = this.hexString + this.hexString.substring(1);\n    }\n  }\n\n  numberToHex(number) {\n    if (number > 255) {\n      number = 255;\n    }\n\n    if (number < 0) {\n      number = 0;\n    }\n\n    let hex = number.toString(16);\n    if (hex.length < 2) {\n      hex = \"0\" + hex;\n    }\n\n    return hex;\n  }\n\n  toHexString() {\n    const rgbArray = this.rgba;\n    const red = this.numberToHex(rgbArray[0]);\n    const green = this.numberToHex(rgbArray[1]);\n    const blue = this.numberToHex(rgbArray[2]);\n\n    return `#${red}${green}${blue}`;\n  }\n}\n"],"file":"HexColor.js"}